"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fast-png";
exports.ids = ["vendor-chunks/fast-png"];
exports.modules = {

/***/ "(ssr)/../../../../node_modules/fast-png/lib-esm/PngDecoder.js":
/*!***************************************************************!*\
  !*** ../../../../node_modules/fast-png/lib-esm/PngDecoder.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PngDecoder)\n/* harmony export */ });\n/* harmony import */ var iobuffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! iobuffer */ \"(ssr)/../../../../node_modules/iobuffer/lib-esm/IOBuffer.js\");\n/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pako */ \"(ssr)/../../../../node_modules/pako/dist/pako.esm.mjs\");\n/* harmony import */ var _helpers_crc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/crc */ \"(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/crc.js\");\n/* harmony import */ var _helpers_decodeInterlaceAdam7__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/decodeInterlaceAdam7 */ \"(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/decodeInterlaceAdam7.js\");\n/* harmony import */ var _helpers_decodeInterlaceNull__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/decodeInterlaceNull */ \"(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/decodeInterlaceNull.js\");\n/* harmony import */ var _helpers_signature__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers/signature */ \"(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/signature.js\");\n/* harmony import */ var _helpers_text__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helpers/text */ \"(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/text.js\");\n/* harmony import */ var _internalTypes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./internalTypes */ \"(ssr)/../../../../node_modules/fast-png/lib-esm/internalTypes.js\");\n\n\n\n\n\n\n\n\nclass PngDecoder extends iobuffer__WEBPACK_IMPORTED_MODULE_0__.IOBuffer {\n    constructor(data, options = {}){\n        super(data);\n        const { checkCrc = false } = options;\n        this._checkCrc = checkCrc;\n        this._inflator = new pako__WEBPACK_IMPORTED_MODULE_1__.Inflate();\n        this._png = {\n            width: -1,\n            height: -1,\n            channels: -1,\n            data: new Uint8Array(0),\n            depth: 1,\n            text: {}\n        };\n        this._apng = {\n            width: -1,\n            height: -1,\n            channels: -1,\n            depth: 1,\n            numberOfFrames: 1,\n            numberOfPlays: 0,\n            text: {},\n            frames: []\n        };\n        this._end = false;\n        this._hasPalette = false;\n        this._palette = [];\n        this._hasTransparency = false;\n        this._transparency = new Uint16Array(0);\n        this._compressionMethod = _internalTypes__WEBPACK_IMPORTED_MODULE_7__.CompressionMethod.UNKNOWN;\n        this._filterMethod = _internalTypes__WEBPACK_IMPORTED_MODULE_7__.FilterMethod.UNKNOWN;\n        this._interlaceMethod = _internalTypes__WEBPACK_IMPORTED_MODULE_7__.InterlaceMethod.UNKNOWN;\n        this._colorType = _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.UNKNOWN;\n        this._isAnimated = false;\n        this._numberOfFrames = 1;\n        this._numberOfPlays = 0;\n        this._frames = [];\n        this._writingDataChunks = false;\n        // PNG is always big endian\n        // https://www.w3.org/TR/PNG/#7Integers-and-byte-order\n        this.setBigEndian();\n    }\n    decode() {\n        (0,_helpers_signature__WEBPACK_IMPORTED_MODULE_5__.checkSignature)(this);\n        while(!this._end){\n            const length = this.readUint32();\n            const type = this.readChars(4);\n            this.decodeChunk(length, type);\n        }\n        this.decodeImage();\n        return this._png;\n    }\n    decodeApng() {\n        (0,_helpers_signature__WEBPACK_IMPORTED_MODULE_5__.checkSignature)(this);\n        while(!this._end){\n            const length = this.readUint32();\n            const type = this.readChars(4);\n            this.decodeApngChunk(length, type);\n        }\n        this.decodeApngImage();\n        return this._apng;\n    }\n    // https://www.w3.org/TR/PNG/#5Chunk-layout\n    decodeChunk(length, type) {\n        const offset = this.offset;\n        switch(type){\n            // 11.2 Critical chunks\n            case \"IHDR\":\n                this.decodeIHDR();\n                break;\n            case \"PLTE\":\n                this.decodePLTE(length);\n                break;\n            case \"IDAT\":\n                this.decodeIDAT(length);\n                break;\n            case \"IEND\":\n                this._end = true;\n                break;\n            // 11.3 Ancillary chunks\n            case \"tRNS\":\n                this.decodetRNS(length);\n                break;\n            case \"iCCP\":\n                this.decodeiCCP(length);\n                break;\n            case _helpers_text__WEBPACK_IMPORTED_MODULE_6__.textChunkName:\n                (0,_helpers_text__WEBPACK_IMPORTED_MODULE_6__.decodetEXt)(this._png.text, this, length);\n                break;\n            case \"pHYs\":\n                this.decodepHYs();\n                break;\n            default:\n                this.skip(length);\n                break;\n        }\n        if (this.offset - offset !== length) {\n            throw new Error(`Length mismatch while decoding chunk ${type}`);\n        }\n        if (this._checkCrc) {\n            (0,_helpers_crc__WEBPACK_IMPORTED_MODULE_2__.checkCrc)(this, length + 4, type);\n        } else {\n            this.skip(4);\n        }\n    }\n    decodeApngChunk(length, type) {\n        const offset = this.offset;\n        if (type !== \"fdAT\" && type !== \"IDAT\" && this._writingDataChunks) {\n            this.pushDataToFrame();\n        }\n        switch(type){\n            case \"acTL\":\n                this.decodeACTL();\n                break;\n            case \"fcTL\":\n                this.decodeFCTL();\n                break;\n            case \"fdAT\":\n                this.decodeFDAT(length);\n                break;\n            default:\n                this.decodeChunk(length, type);\n                this.offset = offset + length;\n                break;\n        }\n        if (this.offset - offset !== length) {\n            throw new Error(`Length mismatch while decoding chunk ${type}`);\n        }\n        if (this._checkCrc) {\n            (0,_helpers_crc__WEBPACK_IMPORTED_MODULE_2__.checkCrc)(this, length + 4, type);\n        } else {\n            this.skip(4);\n        }\n    }\n    // https://www.w3.org/TR/PNG/#11IHDR\n    decodeIHDR() {\n        const image = this._png;\n        image.width = this.readUint32();\n        image.height = this.readUint32();\n        image.depth = checkBitDepth(this.readUint8());\n        const colorType = this.readUint8();\n        this._colorType = colorType;\n        let channels;\n        switch(colorType){\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.GREYSCALE:\n                channels = 1;\n                break;\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.TRUECOLOUR:\n                channels = 3;\n                break;\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.INDEXED_COLOUR:\n                channels = 1;\n                break;\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.GREYSCALE_ALPHA:\n                channels = 2;\n                break;\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.TRUECOLOUR_ALPHA:\n                channels = 4;\n                break;\n            // Kept for exhaustiveness.\n            // eslint-disable-next-line unicorn/no-useless-switch-case\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.UNKNOWN:\n            default:\n                throw new Error(`Unknown color type: ${colorType}`);\n        }\n        this._png.channels = channels;\n        this._compressionMethod = this.readUint8();\n        if (this._compressionMethod !== _internalTypes__WEBPACK_IMPORTED_MODULE_7__.CompressionMethod.DEFLATE) {\n            throw new Error(`Unsupported compression method: ${this._compressionMethod}`);\n        }\n        this._filterMethod = this.readUint8();\n        this._interlaceMethod = this.readUint8();\n    }\n    decodeACTL() {\n        this._numberOfFrames = this.readUint32();\n        this._numberOfPlays = this.readUint32();\n        this._isAnimated = true;\n    }\n    decodeFCTL() {\n        const image = {\n            sequenceNumber: this.readUint32(),\n            width: this.readUint32(),\n            height: this.readUint32(),\n            xOffset: this.readUint32(),\n            yOffset: this.readUint32(),\n            delayNumber: this.readUint16(),\n            delayDenominator: this.readUint16(),\n            disposeOp: this.readUint8(),\n            blendOp: this.readUint8(),\n            data: new Uint8Array(0)\n        };\n        this._frames.push(image);\n    }\n    // https://www.w3.org/TR/PNG/#11PLTE\n    decodePLTE(length) {\n        if (length % 3 !== 0) {\n            throw new RangeError(`PLTE field length must be a multiple of 3. Got ${length}`);\n        }\n        const l = length / 3;\n        this._hasPalette = true;\n        const palette = [];\n        this._palette = palette;\n        for(let i = 0; i < l; i++){\n            palette.push([\n                this.readUint8(),\n                this.readUint8(),\n                this.readUint8()\n            ]);\n        }\n    }\n    // https://www.w3.org/TR/PNG/#11IDAT\n    decodeIDAT(length) {\n        this._writingDataChunks = true;\n        const dataLength = length;\n        const dataOffset = this.offset + this.byteOffset;\n        this._inflator.push(new Uint8Array(this.buffer, dataOffset, dataLength));\n        if (this._inflator.err) {\n            throw new Error(`Error while decompressing the data: ${this._inflator.err}`);\n        }\n        this.skip(length);\n    }\n    decodeFDAT(length) {\n        this._writingDataChunks = true;\n        let dataLength = length;\n        let dataOffset = this.offset + this.byteOffset;\n        dataOffset += 4;\n        dataLength -= 4;\n        this._inflator.push(new Uint8Array(this.buffer, dataOffset, dataLength));\n        if (this._inflator.err) {\n            throw new Error(`Error while decompressing the data: ${this._inflator.err}`);\n        }\n        this.skip(length);\n    }\n    // https://www.w3.org/TR/PNG/#11tRNS\n    decodetRNS(length) {\n        switch(this._colorType){\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.GREYSCALE:\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.TRUECOLOUR:\n                {\n                    if (length % 2 !== 0) {\n                        throw new RangeError(`tRNS chunk length must be a multiple of 2. Got ${length}`);\n                    }\n                    if (length / 2 > this._png.width * this._png.height) {\n                        throw new Error(`tRNS chunk contains more alpha values than there are pixels (${length / 2} vs ${this._png.width * this._png.height})`);\n                    }\n                    this._hasTransparency = true;\n                    this._transparency = new Uint16Array(length / 2);\n                    for(let i = 0; i < length / 2; i++){\n                        this._transparency[i] = this.readUint16();\n                    }\n                    break;\n                }\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.INDEXED_COLOUR:\n                {\n                    if (length > this._palette.length) {\n                        throw new Error(`tRNS chunk contains more alpha values than there are palette colors (${length} vs ${this._palette.length})`);\n                    }\n                    let i = 0;\n                    for(; i < length; i++){\n                        const alpha = this.readByte();\n                        this._palette[i].push(alpha);\n                    }\n                    for(; i < this._palette.length; i++){\n                        this._palette[i].push(255);\n                    }\n                    break;\n                }\n            // Kept for exhaustiveness.\n            /* eslint-disable unicorn/no-useless-switch-case */ case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.UNKNOWN:\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.GREYSCALE_ALPHA:\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.ColorType.TRUECOLOUR_ALPHA:\n            default:\n                {\n                    throw new Error(`tRNS chunk is not supported for color type ${this._colorType}`);\n                }\n        }\n    }\n    // https://www.w3.org/TR/PNG/#11iCCP\n    decodeiCCP(length) {\n        const name = (0,_helpers_text__WEBPACK_IMPORTED_MODULE_6__.readKeyword)(this);\n        const compressionMethod = this.readUint8();\n        if (compressionMethod !== _internalTypes__WEBPACK_IMPORTED_MODULE_7__.CompressionMethod.DEFLATE) {\n            throw new Error(`Unsupported iCCP compression method: ${compressionMethod}`);\n        }\n        const compressedProfile = this.readBytes(length - name.length - 2);\n        this._png.iccEmbeddedProfile = {\n            name,\n            profile: (0,pako__WEBPACK_IMPORTED_MODULE_1__.inflate)(compressedProfile)\n        };\n    }\n    // https://www.w3.org/TR/PNG/#11pHYs\n    decodepHYs() {\n        const ppuX = this.readUint32();\n        const ppuY = this.readUint32();\n        const unitSpecifier = this.readByte();\n        this._png.resolution = {\n            x: ppuX,\n            y: ppuY,\n            unit: unitSpecifier\n        };\n    }\n    decodeApngImage() {\n        this._apng.width = this._png.width;\n        this._apng.height = this._png.height;\n        this._apng.channels = this._png.channels;\n        this._apng.depth = this._png.depth;\n        this._apng.numberOfFrames = this._numberOfFrames;\n        this._apng.numberOfPlays = this._numberOfPlays;\n        this._apng.text = this._png.text;\n        this._apng.resolution = this._png.resolution;\n        for(let i = 0; i < this._numberOfFrames; i++){\n            const newFrame = {\n                sequenceNumber: this._frames[i].sequenceNumber,\n                delayNumber: this._frames[i].delayNumber,\n                delayDenominator: this._frames[i].delayDenominator,\n                data: this._apng.depth === 8 ? new Uint8Array(this._apng.width * this._apng.height * this._apng.channels) : new Uint16Array(this._apng.width * this._apng.height * this._apng.channels)\n            };\n            const frame = this._frames.at(i);\n            if (frame) {\n                frame.data = (0,_helpers_decodeInterlaceNull__WEBPACK_IMPORTED_MODULE_4__.decodeInterlaceNull)({\n                    data: frame.data,\n                    width: frame.width,\n                    height: frame.height,\n                    channels: this._apng.channels,\n                    depth: this._apng.depth\n                });\n                if (this._hasPalette) {\n                    this._apng.palette = this._palette;\n                }\n                if (this._hasTransparency) {\n                    this._apng.transparency = this._transparency;\n                }\n                if (i === 0 || frame.xOffset === 0 && frame.yOffset === 0 && frame.width === this._png.width && frame.height === this._png.height) {\n                    newFrame.data = frame.data;\n                } else {\n                    const prevFrame = this._apng.frames.at(i - 1);\n                    this.disposeFrame(frame, prevFrame, newFrame);\n                    this.addFrameDataToCanvas(newFrame, frame);\n                }\n                this._apng.frames.push(newFrame);\n            }\n        }\n        return this._apng;\n    }\n    disposeFrame(frame, prevFrame, imageFrame) {\n        switch(frame.disposeOp){\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.DisposeOpType.NONE:\n                break;\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.DisposeOpType.BACKGROUND:\n                for(let row = 0; row < this._png.height; row++){\n                    for(let col = 0; col < this._png.width; col++){\n                        const index = (row * frame.width + col) * this._png.channels;\n                        for(let channel = 0; channel < this._png.channels; channel++){\n                            imageFrame.data[index + channel] = 0;\n                        }\n                    }\n                }\n                break;\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.DisposeOpType.PREVIOUS:\n                imageFrame.data.set(prevFrame.data);\n                break;\n            default:\n                throw new Error(\"Unknown disposeOp\");\n        }\n    }\n    addFrameDataToCanvas(imageFrame, frame) {\n        const maxValue = 1 << this._png.depth;\n        const calculatePixelIndices = (row, col)=>{\n            const index = ((row + frame.yOffset) * this._png.width + frame.xOffset + col) * this._png.channels;\n            const frameIndex = (row * frame.width + col) * this._png.channels;\n            return {\n                index,\n                frameIndex\n            };\n        };\n        switch(frame.blendOp){\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.BlendOpType.SOURCE:\n                for(let row = 0; row < frame.height; row++){\n                    for(let col = 0; col < frame.width; col++){\n                        const { index, frameIndex } = calculatePixelIndices(row, col);\n                        for(let channel = 0; channel < this._png.channels; channel++){\n                            imageFrame.data[index + channel] = frame.data[frameIndex + channel];\n                        }\n                    }\n                }\n                break;\n            // https://www.w3.org/TR/png-3/#13Alpha-channel-processing\n            case _internalTypes__WEBPACK_IMPORTED_MODULE_7__.BlendOpType.OVER:\n                for(let row = 0; row < frame.height; row++){\n                    for(let col = 0; col < frame.width; col++){\n                        const { index, frameIndex } = calculatePixelIndices(row, col);\n                        for(let channel = 0; channel < this._png.channels; channel++){\n                            const sourceAlpha = frame.data[frameIndex + this._png.channels - 1] / maxValue;\n                            const foregroundValue = channel % (this._png.channels - 1) === 0 ? 1 : frame.data[frameIndex + channel];\n                            const value = Math.floor(sourceAlpha * foregroundValue + (1 - sourceAlpha) * imageFrame.data[index + channel]);\n                            imageFrame.data[index + channel] += value;\n                        }\n                    }\n                }\n                break;\n            default:\n                throw new Error(\"Unknown blendOp\");\n        }\n    }\n    decodeImage() {\n        if (this._inflator.err) {\n            throw new Error(`Error while decompressing the data: ${this._inflator.err}`);\n        }\n        const data = this._isAnimated ? (this._frames?.at(0)).data : this._inflator.result;\n        if (this._filterMethod !== _internalTypes__WEBPACK_IMPORTED_MODULE_7__.FilterMethod.ADAPTIVE) {\n            throw new Error(`Filter method ${this._filterMethod} not supported`);\n        }\n        if (this._interlaceMethod === _internalTypes__WEBPACK_IMPORTED_MODULE_7__.InterlaceMethod.NO_INTERLACE) {\n            this._png.data = (0,_helpers_decodeInterlaceNull__WEBPACK_IMPORTED_MODULE_4__.decodeInterlaceNull)({\n                data: data,\n                width: this._png.width,\n                height: this._png.height,\n                channels: this._png.channels,\n                depth: this._png.depth\n            });\n        } else if (this._interlaceMethod === _internalTypes__WEBPACK_IMPORTED_MODULE_7__.InterlaceMethod.ADAM7) {\n            this._png.data = (0,_helpers_decodeInterlaceAdam7__WEBPACK_IMPORTED_MODULE_3__.decodeInterlaceAdam7)({\n                data: data,\n                width: this._png.width,\n                height: this._png.height,\n                channels: this._png.channels,\n                depth: this._png.depth\n            });\n        } else {\n            throw new Error(`Interlace method ${this._interlaceMethod} not supported`);\n        }\n        if (this._hasPalette) {\n            this._png.palette = this._palette;\n        }\n        if (this._hasTransparency) {\n            this._png.transparency = this._transparency;\n        }\n    }\n    pushDataToFrame() {\n        const result = this._inflator.result;\n        const lastFrame = this._frames.at(-1);\n        if (lastFrame) {\n            lastFrame.data = result;\n        } else {\n            this._frames.push({\n                sequenceNumber: 0,\n                width: this._png.width,\n                height: this._png.height,\n                xOffset: 0,\n                yOffset: 0,\n                delayNumber: 0,\n                delayDenominator: 0,\n                disposeOp: _internalTypes__WEBPACK_IMPORTED_MODULE_7__.DisposeOpType.NONE,\n                blendOp: _internalTypes__WEBPACK_IMPORTED_MODULE_7__.BlendOpType.SOURCE,\n                data: result\n            });\n        }\n        this._inflator = new pako__WEBPACK_IMPORTED_MODULE_1__.Inflate();\n        this._writingDataChunks = false;\n    }\n}\nfunction checkBitDepth(value) {\n    if (value !== 1 && value !== 2 && value !== 4 && value !== 8 && value !== 16) {\n        throw new Error(`invalid bit depth: ${value}`);\n    }\n    return value;\n} //# sourceMappingURL=PngDecoder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../node_modules/fast-png/lib-esm/PngDecoder.js\n");

/***/ }),

/***/ "(ssr)/../../../../node_modules/fast-png/lib-esm/PngEncoder.js":
/*!***************************************************************!*\
  !*** ../../../../node_modules/fast-png/lib-esm/PngEncoder.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PngEncoder)\n/* harmony export */ });\n/* harmony import */ var iobuffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! iobuffer */ \"(ssr)/../../../../node_modules/iobuffer/lib-esm/IOBuffer.js\");\n/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pako */ \"(ssr)/../../../../node_modules/pako/dist/pako.esm.mjs\");\n/* harmony import */ var _helpers_crc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/crc */ \"(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/crc.js\");\n/* harmony import */ var _helpers_signature__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/signature */ \"(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/signature.js\");\n/* harmony import */ var _helpers_text__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/text */ \"(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/text.js\");\n/* harmony import */ var _internalTypes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internalTypes */ \"(ssr)/../../../../node_modules/fast-png/lib-esm/internalTypes.js\");\n\n\n\n\n\n\nconst defaultZlibOptions = {\n    level: 3\n};\nclass PngEncoder extends iobuffer__WEBPACK_IMPORTED_MODULE_0__.IOBuffer {\n    constructor(data, options = {}){\n        super();\n        this._colorType = _internalTypes__WEBPACK_IMPORTED_MODULE_5__.ColorType.UNKNOWN;\n        this._zlibOptions = {\n            ...defaultZlibOptions,\n            ...options.zlib\n        };\n        this._png = this._checkData(data);\n        this._interlaceMethod = (options.interlace === \"Adam7\" ? _internalTypes__WEBPACK_IMPORTED_MODULE_5__.InterlaceMethod.ADAM7 : _internalTypes__WEBPACK_IMPORTED_MODULE_5__.InterlaceMethod.NO_INTERLACE) ?? _internalTypes__WEBPACK_IMPORTED_MODULE_5__.InterlaceMethod.NO_INTERLACE;\n        this.setBigEndian();\n    }\n    encode() {\n        (0,_helpers_signature__WEBPACK_IMPORTED_MODULE_3__.writeSignature)(this);\n        this.encodeIHDR();\n        if (this._png.palette) {\n            this.encodePLTE();\n            if (this._png.palette[0].length === 4) {\n                this.encodeTRNS();\n            }\n        }\n        this.encodeData();\n        if (this._png.text) {\n            for (const [keyword, text] of Object.entries(this._png.text)){\n                (0,_helpers_text__WEBPACK_IMPORTED_MODULE_4__.encodetEXt)(this, keyword, text);\n            }\n        }\n        this.encodeIEND();\n        return this.toArray();\n    }\n    // https://www.w3.org/TR/PNG/#11IHDR\n    encodeIHDR() {\n        this.writeUint32(13);\n        this.writeChars(\"IHDR\");\n        this.writeUint32(this._png.width);\n        this.writeUint32(this._png.height);\n        this.writeByte(this._png.depth);\n        this.writeByte(this._colorType);\n        this.writeByte(_internalTypes__WEBPACK_IMPORTED_MODULE_5__.CompressionMethod.DEFLATE);\n        this.writeByte(_internalTypes__WEBPACK_IMPORTED_MODULE_5__.FilterMethod.ADAPTIVE);\n        this.writeByte(this._interlaceMethod);\n        (0,_helpers_crc__WEBPACK_IMPORTED_MODULE_2__.writeCrc)(this, 17);\n    }\n    // https://www.w3.org/TR/PNG/#11IEND\n    encodeIEND() {\n        this.writeUint32(0);\n        this.writeChars(\"IEND\");\n        (0,_helpers_crc__WEBPACK_IMPORTED_MODULE_2__.writeCrc)(this, 4);\n    }\n    encodePLTE() {\n        const paletteLength = this._png.palette?.length * 3;\n        this.writeUint32(paletteLength);\n        this.writeChars(\"PLTE\");\n        for (const color of this._png.palette){\n            this.writeByte(color[0]);\n            this.writeByte(color[1]);\n            this.writeByte(color[2]);\n        }\n        (0,_helpers_crc__WEBPACK_IMPORTED_MODULE_2__.writeCrc)(this, 4 + paletteLength);\n    }\n    encodeTRNS() {\n        const alpha = this._png.palette.filter((color)=>{\n            return color.at(-1) !== 255;\n        });\n        this.writeUint32(alpha.length);\n        this.writeChars(\"tRNS\");\n        for (const el of alpha){\n            this.writeByte(el.at(-1));\n        }\n        (0,_helpers_crc__WEBPACK_IMPORTED_MODULE_2__.writeCrc)(this, 4 + alpha.length);\n    }\n    // https://www.w3.org/TR/PNG/#11IDAT\n    encodeIDAT(data) {\n        this.writeUint32(data.length);\n        this.writeChars(\"IDAT\");\n        this.writeBytes(data);\n        (0,_helpers_crc__WEBPACK_IMPORTED_MODULE_2__.writeCrc)(this, data.length + 4);\n    }\n    encodeData() {\n        const { width, height, channels, depth, data } = this._png;\n        const slotsPerLine = depth <= 8 ? Math.ceil(width * depth / 8) * channels : Math.ceil(width * depth / 8 * channels / 2);\n        const newData = new iobuffer__WEBPACK_IMPORTED_MODULE_0__.IOBuffer().setBigEndian();\n        let offset = 0;\n        if (this._interlaceMethod === _internalTypes__WEBPACK_IMPORTED_MODULE_5__.InterlaceMethod.NO_INTERLACE) {\n            for(let i = 0; i < height; i++){\n                newData.writeByte(0); // no filter\n                if (depth === 16) {\n                    offset = writeDataUint16(data, newData, slotsPerLine, offset);\n                } else {\n                    offset = writeDataBytes(data, newData, slotsPerLine, offset);\n                }\n            }\n        } else if (this._interlaceMethod === _internalTypes__WEBPACK_IMPORTED_MODULE_5__.InterlaceMethod.ADAM7) {\n            // Adam7 interlacing\n            offset = writeDataInterlaced(this._png, data, newData, offset);\n        }\n        const buffer = newData.toArray();\n        const compressed = (0,pako__WEBPACK_IMPORTED_MODULE_1__.deflate)(buffer, this._zlibOptions);\n        this.encodeIDAT(compressed);\n    }\n    _checkData(data) {\n        const { colorType, channels, depth } = getColorType(data, data.palette);\n        const png = {\n            width: checkInteger(data.width, \"width\"),\n            height: checkInteger(data.height, \"height\"),\n            channels,\n            data: data.data,\n            depth,\n            text: data.text,\n            palette: data.palette\n        };\n        this._colorType = colorType;\n        const expectedSize = depth < 8 ? Math.ceil(png.width * depth / 8) * png.height * channels : png.width * png.height * channels;\n        if (png.data.length !== expectedSize) {\n            throw new RangeError(`wrong data size. Found ${png.data.length}, expected ${expectedSize}`);\n        }\n        return png;\n    }\n}\nfunction checkInteger(value, name) {\n    if (Number.isInteger(value) && value > 0) {\n        return value;\n    }\n    throw new TypeError(`${name} must be a positive integer`);\n}\nfunction getColorType(data, palette) {\n    const { channels = 4, depth = 8 } = data;\n    if (channels !== 4 && channels !== 3 && channels !== 2 && channels !== 1) {\n        throw new RangeError(`unsupported number of channels: ${channels}`);\n    }\n    const returnValue = {\n        channels,\n        depth,\n        colorType: _internalTypes__WEBPACK_IMPORTED_MODULE_5__.ColorType.UNKNOWN\n    };\n    switch(channels){\n        case 4:\n            returnValue.colorType = _internalTypes__WEBPACK_IMPORTED_MODULE_5__.ColorType.TRUECOLOUR_ALPHA;\n            break;\n        case 3:\n            returnValue.colorType = _internalTypes__WEBPACK_IMPORTED_MODULE_5__.ColorType.TRUECOLOUR;\n            break;\n        case 1:\n            if (palette) {\n                returnValue.colorType = _internalTypes__WEBPACK_IMPORTED_MODULE_5__.ColorType.INDEXED_COLOUR;\n            } else {\n                returnValue.colorType = _internalTypes__WEBPACK_IMPORTED_MODULE_5__.ColorType.GREYSCALE;\n            }\n            break;\n        case 2:\n            returnValue.colorType = _internalTypes__WEBPACK_IMPORTED_MODULE_5__.ColorType.GREYSCALE_ALPHA;\n            break;\n        default:\n            throw new Error(\"unsupported number of channels\");\n    }\n    return returnValue;\n}\nfunction writeDataBytes(data, newData, slotsPerLine, offset) {\n    for(let j = 0; j < slotsPerLine; j++){\n        newData.writeByte(data[offset++]);\n    }\n    return offset;\n}\nfunction writeDataInterlaced(imageData, data, newData, offset) {\n    const passes = [\n        {\n            x: 0,\n            y: 0,\n            xStep: 8,\n            yStep: 8\n        },\n        {\n            x: 4,\n            y: 0,\n            xStep: 8,\n            yStep: 8\n        },\n        {\n            x: 0,\n            y: 4,\n            xStep: 4,\n            yStep: 8\n        },\n        {\n            x: 2,\n            y: 0,\n            xStep: 4,\n            yStep: 4\n        },\n        {\n            x: 0,\n            y: 2,\n            xStep: 2,\n            yStep: 4\n        },\n        {\n            x: 1,\n            y: 0,\n            xStep: 2,\n            yStep: 2\n        },\n        {\n            x: 0,\n            y: 1,\n            xStep: 1,\n            yStep: 2\n        }\n    ];\n    const { width, height, channels, depth } = imageData;\n    let pixelSize = 0;\n    if (depth === 16) {\n        pixelSize = channels * depth / 8 / 2;\n    } else {\n        pixelSize = channels * depth / 8;\n    }\n    // Process each pass\n    for(let passIndex = 0; passIndex < 7; passIndex++){\n        const pass = passes[passIndex];\n        const passWidth = Math.floor((width - pass.x + pass.xStep - 1) / pass.xStep);\n        const passHeight = Math.floor((height - pass.y + pass.yStep - 1) / pass.yStep);\n        if (passWidth <= 0 || passHeight <= 0) continue;\n        const passLineBytes = passWidth * pixelSize;\n        // For each scanline in this pass\n        for(let y = 0; y < passHeight; y++){\n            const imageY = pass.y + y * pass.yStep;\n            // Extract raw scanline data\n            const rawScanline = depth <= 8 ? new Uint8Array(passLineBytes) : new Uint16Array(passLineBytes);\n            let rawOffset = 0;\n            for(let x = 0; x < passWidth; x++){\n                const imageX = pass.x + x * pass.xStep;\n                if (imageX < width && imageY < height) {\n                    const srcPos = (imageY * width + imageX) * pixelSize;\n                    for(let i = 0; i < pixelSize; i++){\n                        rawScanline[rawOffset++] = data[srcPos + i];\n                    }\n                }\n            }\n            newData.writeByte(0); // no filter\n            if (depth === 8) {\n                newData.writeBytes(rawScanline);\n            } else if (depth === 16) {\n                for (const value of rawScanline){\n                    newData.writeByte(value >> 8 & 0xff); // High byte\n                    newData.writeByte(value & 0xff);\n                }\n            }\n        }\n    }\n    return offset;\n}\nfunction writeDataUint16(data, newData, slotsPerLine, offset) {\n    for(let j = 0; j < slotsPerLine; j++){\n        newData.writeUint16(data[offset++]);\n    }\n    return offset;\n} //# sourceMappingURL=PngEncoder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../node_modules/fast-png/lib-esm/PngEncoder.js\n");

/***/ }),

/***/ "(ssr)/../../../../node_modules/fast-png/lib-esm/convertIndexedToRgb.js":
/*!************************************************************************!*\
  !*** ../../../../node_modules/fast-png/lib-esm/convertIndexedToRgb.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertIndexedToRgb: () => (/* binding */ convertIndexedToRgb)\n/* harmony export */ });\n/**\n * Converts indexed data into RGB/RGBA format\n * @param decodedImage - Image to decode data from.\n * @returns Uint8Array with RGB data.\n */ function convertIndexedToRgb(decodedImage) {\n    const palette = decodedImage.palette;\n    const depth = decodedImage.depth;\n    if (!palette) {\n        throw new Error(\"Color palette is undefined.\");\n    }\n    checkDataSize(decodedImage);\n    const indexSize = decodedImage.width * decodedImage.height;\n    const resSize = indexSize * palette[0].length;\n    const res = new Uint8Array(resSize);\n    let indexPos = 0;\n    let offset = 0;\n    const indexes = new Uint8Array(indexSize);\n    let bit = 0xff;\n    switch(depth){\n        case 1:\n            bit = 0x80;\n            break;\n        case 2:\n            bit = 0xc0;\n            break;\n        case 4:\n            bit = 0xf0;\n            break;\n        case 8:\n            bit = 0xff;\n            break;\n        default:\n            throw new Error(\"Incorrect depth value\");\n    }\n    for (const byte of decodedImage.data){\n        let bit2 = bit;\n        let shift = 8;\n        while(bit2){\n            shift -= depth;\n            indexes[indexPos++] = (byte & bit2) >> shift;\n            bit2 = bit2 >> depth;\n            if (indexPos % decodedImage.width === 0) {\n                break;\n            }\n        }\n    }\n    if (decodedImage.palette) {\n        for (const index of indexes){\n            const color = decodedImage.palette.at(index);\n            if (!color) {\n                throw new Error(\"Incorrect index of palette color\");\n            }\n            res.set(color, offset);\n            offset += color.length;\n        }\n    }\n    return res;\n}\nfunction checkDataSize(image) {\n    const expectedSize = image.depth < 8 ? Math.ceil(image.width * image.depth / 8) * image.height * image.channels : image.width * image.height * image.channels;\n    if (image.data.length !== expectedSize) {\n        throw new RangeError(`wrong data size. Found ${image.data.length}, expected ${expectedSize}`);\n    }\n} //# sourceMappingURL=convertIndexedToRgb.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vY29udmVydEluZGV4ZWRUb1JnYi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Q0FJQyxHQUNNLFNBQVNBLG9CQUFvQkMsWUFBWTtJQUM1QyxNQUFNQyxVQUFVRCxhQUFhQyxPQUFPO0lBQ3BDLE1BQU1DLFFBQVFGLGFBQWFFLEtBQUs7SUFDaEMsSUFBSSxDQUFDRCxTQUFTO1FBQ1YsTUFBTSxJQUFJRSxNQUFNO0lBQ3BCO0lBQ0FDLGNBQWNKO0lBQ2QsTUFBTUssWUFBWUwsYUFBYU0sS0FBSyxHQUFHTixhQUFhTyxNQUFNO0lBQzFELE1BQU1DLFVBQVVILFlBQVlKLE9BQU8sQ0FBQyxFQUFFLENBQUNRLE1BQU07SUFDN0MsTUFBTUMsTUFBTSxJQUFJQyxXQUFXSDtJQUMzQixJQUFJSSxXQUFXO0lBQ2YsSUFBSUMsU0FBUztJQUNiLE1BQU1DLFVBQVUsSUFBSUgsV0FBV047SUFDL0IsSUFBSVUsTUFBTTtJQUNWLE9BQVFiO1FBQ0osS0FBSztZQUNEYSxNQUFNO1lBQ047UUFDSixLQUFLO1lBQ0RBLE1BQU07WUFDTjtRQUNKLEtBQUs7WUFDREEsTUFBTTtZQUNOO1FBQ0osS0FBSztZQUNEQSxNQUFNO1lBQ047UUFDSjtZQUNJLE1BQU0sSUFBSVosTUFBTTtJQUN4QjtJQUNBLEtBQUssTUFBTWEsUUFBUWhCLGFBQWFpQixJQUFJLENBQUU7UUFDbEMsSUFBSUMsT0FBT0g7UUFDWCxJQUFJSSxRQUFRO1FBQ1osTUFBT0QsS0FBTTtZQUNUQyxTQUFTakI7WUFDVFksT0FBTyxDQUFDRixXQUFXLEdBQUcsQ0FBQ0ksT0FBT0UsSUFBRyxLQUFNQztZQUN2Q0QsT0FBT0EsUUFBUWhCO1lBQ2YsSUFBSVUsV0FBV1osYUFBYU0sS0FBSyxLQUFLLEdBQUc7Z0JBQ3JDO1lBQ0o7UUFDSjtJQUNKO0lBQ0EsSUFBSU4sYUFBYUMsT0FBTyxFQUFFO1FBQ3RCLEtBQUssTUFBTW1CLFNBQVNOLFFBQVM7WUFDekIsTUFBTU8sUUFBUXJCLGFBQWFDLE9BQU8sQ0FBQ3FCLEVBQUUsQ0FBQ0Y7WUFDdEMsSUFBSSxDQUFDQyxPQUFPO2dCQUNSLE1BQU0sSUFBSWxCLE1BQU07WUFDcEI7WUFDQU8sSUFBSWEsR0FBRyxDQUFDRixPQUFPUjtZQUNmQSxVQUFVUSxNQUFNWixNQUFNO1FBQzFCO0lBQ0o7SUFDQSxPQUFPQztBQUNYO0FBQ0EsU0FBU04sY0FBY29CLEtBQUs7SUFDeEIsTUFBTUMsZUFBZUQsTUFBTXRCLEtBQUssR0FBRyxJQUM3QndCLEtBQUtDLElBQUksQ0FBQyxNQUFPckIsS0FBSyxHQUFHa0IsTUFBTXRCLEtBQUssR0FBSSxLQUN0Q3NCLE1BQU1qQixNQUFNLEdBQ1ppQixNQUFNSSxRQUFRLEdBQ2hCSixNQUFNbEIsS0FBSyxHQUFHa0IsTUFBTWpCLE1BQU0sR0FBR2lCLE1BQU1JLFFBQVE7SUFDakQsSUFBSUosTUFBTVAsSUFBSSxDQUFDUixNQUFNLEtBQUtnQixjQUFjO1FBQ3BDLE1BQU0sSUFBSUksV0FBVyxDQUFDLHVCQUF1QixFQUFFTCxNQUFNUCxJQUFJLENBQUNSLE1BQU0sQ0FBQyxXQUFXLEVBQUVnQixhQUFhLENBQUM7SUFDaEc7QUFDSixFQUNBLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NhbGN1bGFkb3JhLXJvaS8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC1wbmcvbGliLWVzbS9jb252ZXJ0SW5kZXhlZFRvUmdiLmpzP2I1YzgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb252ZXJ0cyBpbmRleGVkIGRhdGEgaW50byBSR0IvUkdCQSBmb3JtYXRcbiAqIEBwYXJhbSBkZWNvZGVkSW1hZ2UgLSBJbWFnZSB0byBkZWNvZGUgZGF0YSBmcm9tLlxuICogQHJldHVybnMgVWludDhBcnJheSB3aXRoIFJHQiBkYXRhLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydEluZGV4ZWRUb1JnYihkZWNvZGVkSW1hZ2UpIHtcbiAgICBjb25zdCBwYWxldHRlID0gZGVjb2RlZEltYWdlLnBhbGV0dGU7XG4gICAgY29uc3QgZGVwdGggPSBkZWNvZGVkSW1hZ2UuZGVwdGg7XG4gICAgaWYgKCFwYWxldHRlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ29sb3IgcGFsZXR0ZSBpcyB1bmRlZmluZWQuJyk7XG4gICAgfVxuICAgIGNoZWNrRGF0YVNpemUoZGVjb2RlZEltYWdlKTtcbiAgICBjb25zdCBpbmRleFNpemUgPSBkZWNvZGVkSW1hZ2Uud2lkdGggKiBkZWNvZGVkSW1hZ2UuaGVpZ2h0O1xuICAgIGNvbnN0IHJlc1NpemUgPSBpbmRleFNpemUgKiBwYWxldHRlWzBdLmxlbmd0aDtcbiAgICBjb25zdCByZXMgPSBuZXcgVWludDhBcnJheShyZXNTaXplKTtcbiAgICBsZXQgaW5kZXhQb3MgPSAwO1xuICAgIGxldCBvZmZzZXQgPSAwO1xuICAgIGNvbnN0IGluZGV4ZXMgPSBuZXcgVWludDhBcnJheShpbmRleFNpemUpO1xuICAgIGxldCBiaXQgPSAweGZmO1xuICAgIHN3aXRjaCAoZGVwdGgpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgYml0ID0gMHg4MDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBiaXQgPSAweGMwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIGJpdCA9IDB4ZjA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgYml0ID0gMHhmZjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbmNvcnJlY3QgZGVwdGggdmFsdWUnKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBieXRlIG9mIGRlY29kZWRJbWFnZS5kYXRhKSB7XG4gICAgICAgIGxldCBiaXQyID0gYml0O1xuICAgICAgICBsZXQgc2hpZnQgPSA4O1xuICAgICAgICB3aGlsZSAoYml0Mikge1xuICAgICAgICAgICAgc2hpZnQgLT0gZGVwdGg7XG4gICAgICAgICAgICBpbmRleGVzW2luZGV4UG9zKytdID0gKGJ5dGUgJiBiaXQyKSA+PiBzaGlmdDtcbiAgICAgICAgICAgIGJpdDIgPSBiaXQyID4+IGRlcHRoO1xuICAgICAgICAgICAgaWYgKGluZGV4UG9zICUgZGVjb2RlZEltYWdlLndpZHRoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRlY29kZWRJbWFnZS5wYWxldHRlKSB7XG4gICAgICAgIGZvciAoY29uc3QgaW5kZXggb2YgaW5kZXhlcykge1xuICAgICAgICAgICAgY29uc3QgY29sb3IgPSBkZWNvZGVkSW1hZ2UucGFsZXR0ZS5hdChpbmRleCk7XG4gICAgICAgICAgICBpZiAoIWNvbG9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbmNvcnJlY3QgaW5kZXggb2YgcGFsZXR0ZSBjb2xvcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzLnNldChjb2xvciwgb2Zmc2V0KTtcbiAgICAgICAgICAgIG9mZnNldCArPSBjb2xvci5sZW5ndGg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGNoZWNrRGF0YVNpemUoaW1hZ2UpIHtcbiAgICBjb25zdCBleHBlY3RlZFNpemUgPSBpbWFnZS5kZXB0aCA8IDhcbiAgICAgICAgPyBNYXRoLmNlaWwoKGltYWdlLndpZHRoICogaW1hZ2UuZGVwdGgpIC8gOCkgKlxuICAgICAgICAgICAgaW1hZ2UuaGVpZ2h0ICpcbiAgICAgICAgICAgIGltYWdlLmNoYW5uZWxzXG4gICAgICAgIDogaW1hZ2Uud2lkdGggKiBpbWFnZS5oZWlnaHQgKiBpbWFnZS5jaGFubmVscztcbiAgICBpZiAoaW1hZ2UuZGF0YS5sZW5ndGggIT09IGV4cGVjdGVkU2l6ZSkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgd3JvbmcgZGF0YSBzaXplLiBGb3VuZCAke2ltYWdlLmRhdGEubGVuZ3RofSwgZXhwZWN0ZWQgJHtleHBlY3RlZFNpemV9YCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udmVydEluZGV4ZWRUb1JnYi5qcy5tYXAiXSwibmFtZXMiOlsiY29udmVydEluZGV4ZWRUb1JnYiIsImRlY29kZWRJbWFnZSIsInBhbGV0dGUiLCJkZXB0aCIsIkVycm9yIiwiY2hlY2tEYXRhU2l6ZSIsImluZGV4U2l6ZSIsIndpZHRoIiwiaGVpZ2h0IiwicmVzU2l6ZSIsImxlbmd0aCIsInJlcyIsIlVpbnQ4QXJyYXkiLCJpbmRleFBvcyIsIm9mZnNldCIsImluZGV4ZXMiLCJiaXQiLCJieXRlIiwiZGF0YSIsImJpdDIiLCJzaGlmdCIsImluZGV4IiwiY29sb3IiLCJhdCIsInNldCIsImltYWdlIiwiZXhwZWN0ZWRTaXplIiwiTWF0aCIsImNlaWwiLCJjaGFubmVscyIsIlJhbmdlRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../node_modules/fast-png/lib-esm/convertIndexedToRgb.js\n");

/***/ }),

/***/ "(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/applyUnfilter.js":
/*!**************************************************************************!*\
  !*** ../../../../node_modules/fast-png/lib-esm/helpers/applyUnfilter.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyUnfilter: () => (/* binding */ applyUnfilter)\n/* harmony export */ });\n/* harmony import */ var _unfilter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unfilter */ \"(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/unfilter.js\");\n\n/**\n * Apllies filter on scanline based on the filter type.\n * @param filterType - The filter type to apply.\n * @param currentLine - The current line of pixel data.\n * @param newLine - The new line of pixel data.\n * @param prevLine - The previous line of pixel data.\n * @param passLineBytes - The number of bytes in the pass line.\n * @param bytesPerPixel - The number of bytes per pixel.\n */ function applyUnfilter(filterType, currentLine, newLine, prevLine, passLineBytes, bytesPerPixel) {\n    switch(filterType){\n        case 0:\n            (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterNone)(currentLine, newLine, passLineBytes);\n            break;\n        case 1:\n            (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterSub)(currentLine, newLine, passLineBytes, bytesPerPixel);\n            break;\n        case 2:\n            (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterUp)(currentLine, newLine, prevLine, passLineBytes);\n            break;\n        case 3:\n            (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterAverage)(currentLine, newLine, prevLine, passLineBytes, bytesPerPixel);\n            break;\n        case 4:\n            (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterPaeth)(currentLine, newLine, prevLine, passLineBytes, bytesPerPixel);\n            break;\n        default:\n            throw new Error(`Unsupported filter: ${filterType}`);\n    }\n} //# sourceMappingURL=applyUnfilter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vaGVscGVycy9hcHBseVVuZmlsdGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW9HO0FBQ3BHOzs7Ozs7OztDQVFDLEdBQ00sU0FBU0ssY0FBY0MsVUFBVSxFQUFFQyxXQUFXLEVBQUVDLE9BQU8sRUFBRUMsUUFBUSxFQUFFQyxhQUFhLEVBQUVDLGFBQWE7SUFDbEcsT0FBUUw7UUFDSixLQUFLO1lBQ0RMLHVEQUFZQSxDQUFDTSxhQUFhQyxTQUFTRTtZQUNuQztRQUNKLEtBQUs7WUFDRFAsc0RBQVdBLENBQUNJLGFBQWFDLFNBQVNFLGVBQWVDO1lBQ2pEO1FBQ0osS0FBSztZQUNEUCxxREFBVUEsQ0FBQ0csYUFBYUMsU0FBU0MsVUFBVUM7WUFDM0M7UUFDSixLQUFLO1lBQ0RWLDBEQUFlQSxDQUFDTyxhQUFhQyxTQUFTQyxVQUFVQyxlQUFlQztZQUMvRDtRQUNKLEtBQUs7WUFDRFQsd0RBQWFBLENBQUNLLGFBQWFDLFNBQVNDLFVBQVVDLGVBQWVDO1lBQzdEO1FBQ0o7WUFDSSxNQUFNLElBQUlDLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRU4sV0FBVyxDQUFDO0lBQzNEO0FBQ0osRUFDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWxjdWxhZG9yYS1yb2kvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vaGVscGVycy9hcHBseVVuZmlsdGVyLmpzPzI4NmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdW5maWx0ZXJBdmVyYWdlLCB1bmZpbHRlck5vbmUsIHVuZmlsdGVyUGFldGgsIHVuZmlsdGVyU3ViLCB1bmZpbHRlclVwLCB9IGZyb20gJy4vdW5maWx0ZXInO1xuLyoqXG4gKiBBcGxsaWVzIGZpbHRlciBvbiBzY2FubGluZSBiYXNlZCBvbiB0aGUgZmlsdGVyIHR5cGUuXG4gKiBAcGFyYW0gZmlsdGVyVHlwZSAtIFRoZSBmaWx0ZXIgdHlwZSB0byBhcHBseS5cbiAqIEBwYXJhbSBjdXJyZW50TGluZSAtIFRoZSBjdXJyZW50IGxpbmUgb2YgcGl4ZWwgZGF0YS5cbiAqIEBwYXJhbSBuZXdMaW5lIC0gVGhlIG5ldyBsaW5lIG9mIHBpeGVsIGRhdGEuXG4gKiBAcGFyYW0gcHJldkxpbmUgLSBUaGUgcHJldmlvdXMgbGluZSBvZiBwaXhlbCBkYXRhLlxuICogQHBhcmFtIHBhc3NMaW5lQnl0ZXMgLSBUaGUgbnVtYmVyIG9mIGJ5dGVzIGluIHRoZSBwYXNzIGxpbmUuXG4gKiBAcGFyYW0gYnl0ZXNQZXJQaXhlbCAtIFRoZSBudW1iZXIgb2YgYnl0ZXMgcGVyIHBpeGVsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlVbmZpbHRlcihmaWx0ZXJUeXBlLCBjdXJyZW50TGluZSwgbmV3TGluZSwgcHJldkxpbmUsIHBhc3NMaW5lQnl0ZXMsIGJ5dGVzUGVyUGl4ZWwpIHtcbiAgICBzd2l0Y2ggKGZpbHRlclR5cGUpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgdW5maWx0ZXJOb25lKGN1cnJlbnRMaW5lLCBuZXdMaW5lLCBwYXNzTGluZUJ5dGVzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICB1bmZpbHRlclN1YihjdXJyZW50TGluZSwgbmV3TGluZSwgcGFzc0xpbmVCeXRlcywgYnl0ZXNQZXJQaXhlbCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgdW5maWx0ZXJVcChjdXJyZW50TGluZSwgbmV3TGluZSwgcHJldkxpbmUsIHBhc3NMaW5lQnl0ZXMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHVuZmlsdGVyQXZlcmFnZShjdXJyZW50TGluZSwgbmV3TGluZSwgcHJldkxpbmUsIHBhc3NMaW5lQnl0ZXMsIGJ5dGVzUGVyUGl4ZWwpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIHVuZmlsdGVyUGFldGgoY3VycmVudExpbmUsIG5ld0xpbmUsIHByZXZMaW5lLCBwYXNzTGluZUJ5dGVzLCBieXRlc1BlclBpeGVsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBmaWx0ZXI6ICR7ZmlsdGVyVHlwZX1gKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHBseVVuZmlsdGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJ1bmZpbHRlckF2ZXJhZ2UiLCJ1bmZpbHRlck5vbmUiLCJ1bmZpbHRlclBhZXRoIiwidW5maWx0ZXJTdWIiLCJ1bmZpbHRlclVwIiwiYXBwbHlVbmZpbHRlciIsImZpbHRlclR5cGUiLCJjdXJyZW50TGluZSIsIm5ld0xpbmUiLCJwcmV2TGluZSIsInBhc3NMaW5lQnl0ZXMiLCJieXRlc1BlclBpeGVsIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/applyUnfilter.js\n");

/***/ }),

/***/ "(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/crc.js":
/*!****************************************************************!*\
  !*** ../../../../node_modules/fast-png/lib-esm/helpers/crc.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkCrc: () => (/* binding */ checkCrc),\n/* harmony export */   writeCrc: () => (/* binding */ writeCrc)\n/* harmony export */ });\nconst crcTable = [];\nfor(let n = 0; n < 256; n++){\n    let c = n;\n    for(let k = 0; k < 8; k++){\n        if (c & 1) {\n            c = 0xedb88320 ^ c >>> 1;\n        } else {\n            c = c >>> 1;\n        }\n    }\n    crcTable[n] = c;\n}\nconst initialCrc = 0xffffffff;\nfunction updateCrc(currentCrc, data, length) {\n    let c = currentCrc;\n    for(let n = 0; n < length; n++){\n        c = crcTable[(c ^ data[n]) & 0xff] ^ c >>> 8;\n    }\n    return c;\n}\nfunction crc(data, length) {\n    return (updateCrc(initialCrc, data, length) ^ initialCrc) >>> 0;\n}\nfunction checkCrc(buffer, crcLength, chunkName) {\n    const expectedCrc = buffer.readUint32();\n    const actualCrc = crc(new Uint8Array(buffer.buffer, buffer.byteOffset + buffer.offset - crcLength - 4, crcLength), crcLength); // \"- 4\" because we already advanced by reading the CRC\n    if (actualCrc !== expectedCrc) {\n        throw new Error(`CRC mismatch for chunk ${chunkName}. Expected ${expectedCrc}, found ${actualCrc}`);\n    }\n}\nfunction writeCrc(buffer, length) {\n    buffer.writeUint32(crc(new Uint8Array(buffer.buffer, buffer.byteOffset + buffer.offset - length, length), length));\n} //# sourceMappingURL=crc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vaGVscGVycy9jcmMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxNQUFNQSxXQUFXLEVBQUU7QUFDbkIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUksS0FBS0EsSUFBSztJQUMxQixJQUFJQyxJQUFJRDtJQUNSLElBQUssSUFBSUUsSUFBSSxHQUFHQSxJQUFJLEdBQUdBLElBQUs7UUFDeEIsSUFBSUQsSUFBSSxHQUFHO1lBQ1BBLElBQUksYUFBY0EsTUFBTTtRQUM1QixPQUNLO1lBQ0RBLElBQUlBLE1BQU07UUFDZDtJQUNKO0lBQ0FGLFFBQVEsQ0FBQ0MsRUFBRSxHQUFHQztBQUNsQjtBQUNBLE1BQU1FLGFBQWE7QUFDbkIsU0FBU0MsVUFBVUMsVUFBVSxFQUFFQyxJQUFJLEVBQUVDLE1BQU07SUFDdkMsSUFBSU4sSUFBSUk7SUFDUixJQUFLLElBQUlMLElBQUksR0FBR0EsSUFBSU8sUUFBUVAsSUFBSztRQUM3QkMsSUFBSUYsUUFBUSxDQUFDLENBQUNFLElBQUlLLElBQUksQ0FBQ04sRUFBRSxJQUFJLEtBQUssR0FBSUMsTUFBTTtJQUNoRDtJQUNBLE9BQU9BO0FBQ1g7QUFDQSxTQUFTTyxJQUFJRixJQUFJLEVBQUVDLE1BQU07SUFDckIsT0FBTyxDQUFDSCxVQUFVRCxZQUFZRyxNQUFNQyxVQUFVSixVQUFTLE1BQU87QUFDbEU7QUFDTyxTQUFTTSxTQUFTQyxNQUFNLEVBQUVDLFNBQVMsRUFBRUMsU0FBUztJQUNqRCxNQUFNQyxjQUFjSCxPQUFPSSxVQUFVO0lBQ3JDLE1BQU1DLFlBQVlQLElBQUksSUFBSVEsV0FBV04sT0FBT0EsTUFBTSxFQUFFQSxPQUFPTyxVQUFVLEdBQUdQLE9BQU9RLE1BQU0sR0FBR1AsWUFBWSxHQUFHQSxZQUFZQSxZQUFZLHVEQUF1RDtJQUN0TCxJQUFJSSxjQUFjRixhQUFhO1FBQzNCLE1BQU0sSUFBSU0sTUFBTSxDQUFDLHVCQUF1QixFQUFFUCxVQUFVLFdBQVcsRUFBRUMsWUFBWSxRQUFRLEVBQUVFLFVBQVUsQ0FBQztJQUN0RztBQUNKO0FBQ08sU0FBU0ssU0FBU1YsTUFBTSxFQUFFSCxNQUFNO0lBQ25DRyxPQUFPVyxXQUFXLENBQUNiLElBQUksSUFBSVEsV0FBV04sT0FBT0EsTUFBTSxFQUFFQSxPQUFPTyxVQUFVLEdBQUdQLE9BQU9RLE1BQU0sR0FBR1gsUUFBUUEsU0FBU0E7QUFDOUcsRUFDQSwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWxjdWxhZG9yYS1yb2kvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vaGVscGVycy9jcmMuanM/ZDNlMSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjcmNUYWJsZSA9IFtdO1xuZm9yIChsZXQgbiA9IDA7IG4gPCAyNTY7IG4rKykge1xuICAgIGxldCBjID0gbjtcbiAgICBmb3IgKGxldCBrID0gMDsgayA8IDg7IGsrKykge1xuICAgICAgICBpZiAoYyAmIDEpIHtcbiAgICAgICAgICAgIGMgPSAweGVkYjg4MzIwIF4gKGMgPj4+IDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYyA9IGMgPj4+IDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3JjVGFibGVbbl0gPSBjO1xufVxuY29uc3QgaW5pdGlhbENyYyA9IDB4ZmZmZmZmZmY7XG5mdW5jdGlvbiB1cGRhdGVDcmMoY3VycmVudENyYywgZGF0YSwgbGVuZ3RoKSB7XG4gICAgbGV0IGMgPSBjdXJyZW50Q3JjO1xuICAgIGZvciAobGV0IG4gPSAwOyBuIDwgbGVuZ3RoOyBuKyspIHtcbiAgICAgICAgYyA9IGNyY1RhYmxlWyhjIF4gZGF0YVtuXSkgJiAweGZmXSBeIChjID4+PiA4KTtcbiAgICB9XG4gICAgcmV0dXJuIGM7XG59XG5mdW5jdGlvbiBjcmMoZGF0YSwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuICh1cGRhdGVDcmMoaW5pdGlhbENyYywgZGF0YSwgbGVuZ3RoKSBeIGluaXRpYWxDcmMpID4+PiAwO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrQ3JjKGJ1ZmZlciwgY3JjTGVuZ3RoLCBjaHVua05hbWUpIHtcbiAgICBjb25zdCBleHBlY3RlZENyYyA9IGJ1ZmZlci5yZWFkVWludDMyKCk7XG4gICAgY29uc3QgYWN0dWFsQ3JjID0gY3JjKG5ldyBVaW50OEFycmF5KGJ1ZmZlci5idWZmZXIsIGJ1ZmZlci5ieXRlT2Zmc2V0ICsgYnVmZmVyLm9mZnNldCAtIGNyY0xlbmd0aCAtIDQsIGNyY0xlbmd0aCksIGNyY0xlbmd0aCk7IC8vIFwiLSA0XCIgYmVjYXVzZSB3ZSBhbHJlYWR5IGFkdmFuY2VkIGJ5IHJlYWRpbmcgdGhlIENSQ1xuICAgIGlmIChhY3R1YWxDcmMgIT09IGV4cGVjdGVkQ3JjKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ1JDIG1pc21hdGNoIGZvciBjaHVuayAke2NodW5rTmFtZX0uIEV4cGVjdGVkICR7ZXhwZWN0ZWRDcmN9LCBmb3VuZCAke2FjdHVhbENyY31gKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gd3JpdGVDcmMoYnVmZmVyLCBsZW5ndGgpIHtcbiAgICBidWZmZXIud3JpdGVVaW50MzIoY3JjKG5ldyBVaW50OEFycmF5KGJ1ZmZlci5idWZmZXIsIGJ1ZmZlci5ieXRlT2Zmc2V0ICsgYnVmZmVyLm9mZnNldCAtIGxlbmd0aCwgbGVuZ3RoKSwgbGVuZ3RoKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmMuanMubWFwIl0sIm5hbWVzIjpbImNyY1RhYmxlIiwibiIsImMiLCJrIiwiaW5pdGlhbENyYyIsInVwZGF0ZUNyYyIsImN1cnJlbnRDcmMiLCJkYXRhIiwibGVuZ3RoIiwiY3JjIiwiY2hlY2tDcmMiLCJidWZmZXIiLCJjcmNMZW5ndGgiLCJjaHVua05hbWUiLCJleHBlY3RlZENyYyIsInJlYWRVaW50MzIiLCJhY3R1YWxDcmMiLCJVaW50OEFycmF5IiwiYnl0ZU9mZnNldCIsIm9mZnNldCIsIkVycm9yIiwid3JpdGVDcmMiLCJ3cml0ZVVpbnQzMiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/crc.js\n");

/***/ }),

/***/ "(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/decodeInterlaceAdam7.js":
/*!*********************************************************************************!*\
  !*** ../../../../node_modules/fast-png/lib-esm/helpers/decodeInterlaceAdam7.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeInterlaceAdam7: () => (/* binding */ decodeInterlaceAdam7)\n/* harmony export */ });\n/* harmony import */ var _applyUnfilter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./applyUnfilter */ \"(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/applyUnfilter.js\");\n\nconst uint16 = new Uint16Array([\n    0x00ff\n]);\nconst uint8 = new Uint8Array(uint16.buffer);\nconst osIsLittleEndian = uint8[0] === 0xff;\n/**\n * Decodes the Adam7 interlaced PNG data.\n *\n * @param params - DecodeInterlaceNullParams\n * @returns - array of pixel data.\n */ function decodeInterlaceAdam7(params) {\n    const { data, width, height, channels, depth } = params;\n    // Adam7 interlacing pattern\n    const passes = [\n        {\n            x: 0,\n            y: 0,\n            xStep: 8,\n            yStep: 8\n        },\n        {\n            x: 4,\n            y: 0,\n            xStep: 8,\n            yStep: 8\n        },\n        {\n            x: 0,\n            y: 4,\n            xStep: 4,\n            yStep: 8\n        },\n        {\n            x: 2,\n            y: 0,\n            xStep: 4,\n            yStep: 4\n        },\n        {\n            x: 0,\n            y: 2,\n            xStep: 2,\n            yStep: 4\n        },\n        {\n            x: 1,\n            y: 0,\n            xStep: 2,\n            yStep: 2\n        },\n        {\n            x: 0,\n            y: 1,\n            xStep: 1,\n            yStep: 2\n        }\n    ];\n    const bytesPerPixel = Math.ceil(depth / 8) * channels;\n    const resultData = new Uint8Array(height * width * bytesPerPixel);\n    let offset = 0;\n    // Process each pass\n    for(let passIndex = 0; passIndex < 7; passIndex++){\n        const pass = passes[passIndex];\n        // Calculate pass dimensions\n        const passWidth = Math.ceil((width - pass.x) / pass.xStep);\n        const passHeight = Math.ceil((height - pass.y) / pass.yStep);\n        if (passWidth <= 0 || passHeight <= 0) continue;\n        const passLineBytes = passWidth * bytesPerPixel;\n        const prevLine = new Uint8Array(passLineBytes);\n        // Process each scanline in this pass\n        for(let y = 0; y < passHeight; y++){\n            // First byte is the filter type\n            const filterType = data[offset++];\n            const currentLine = data.subarray(offset, offset + passLineBytes);\n            offset += passLineBytes;\n            // Create a new line for the unfiltered data\n            const newLine = new Uint8Array(passLineBytes);\n            // Apply the appropriate unfilter\n            (0,_applyUnfilter__WEBPACK_IMPORTED_MODULE_0__.applyUnfilter)(filterType, currentLine, newLine, prevLine, passLineBytes, bytesPerPixel);\n            prevLine.set(newLine);\n            for(let x = 0; x < passWidth; x++){\n                const outputX = pass.x + x * pass.xStep;\n                const outputY = pass.y + y * pass.yStep;\n                if (outputX >= width || outputY >= height) continue;\n                for(let i = 0; i < bytesPerPixel; i++){\n                    resultData[(outputY * width + outputX) * bytesPerPixel + i] = newLine[x * bytesPerPixel + i];\n                }\n            }\n        }\n    }\n    if (depth === 16) {\n        const uint16Data = new Uint16Array(resultData.buffer);\n        if (osIsLittleEndian) {\n            for(let k = 0; k < uint16Data.length; k++){\n                // PNG is always big endian. Swap the bytes.\n                uint16Data[k] = swap16(uint16Data[k]);\n            }\n        }\n        return uint16Data;\n    } else {\n        return resultData;\n    }\n}\nfunction swap16(val) {\n    return (val & 0xff) << 8 | val >> 8 & 0xff;\n} //# sourceMappingURL=decodeInterlaceAdam7.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/decodeInterlaceAdam7.js\n");

/***/ }),

/***/ "(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/decodeInterlaceNull.js":
/*!********************************************************************************!*\
  !*** ../../../../node_modules/fast-png/lib-esm/helpers/decodeInterlaceNull.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeInterlaceNull: () => (/* binding */ decodeInterlaceNull)\n/* harmony export */ });\n/* harmony import */ var _unfilter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unfilter */ \"(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/unfilter.js\");\n\nconst uint16 = new Uint16Array([\n    0x00ff\n]);\nconst uint8 = new Uint8Array(uint16.buffer);\nconst osIsLittleEndian = uint8[0] === 0xff;\nconst empty = new Uint8Array(0);\nfunction decodeInterlaceNull(params) {\n    const { data, width, height, channels, depth } = params;\n    const bytesPerPixel = Math.ceil(depth / 8) * channels;\n    const bytesPerLine = Math.ceil(depth / 8 * channels * width);\n    const newData = new Uint8Array(height * bytesPerLine);\n    let prevLine = empty;\n    let offset = 0;\n    let currentLine;\n    let newLine;\n    for(let i = 0; i < height; i++){\n        currentLine = data.subarray(offset + 1, offset + 1 + bytesPerLine);\n        newLine = newData.subarray(i * bytesPerLine, (i + 1) * bytesPerLine);\n        switch(data[offset]){\n            case 0:\n                (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterNone)(currentLine, newLine, bytesPerLine);\n                break;\n            case 1:\n                (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterSub)(currentLine, newLine, bytesPerLine, bytesPerPixel);\n                break;\n            case 2:\n                (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterUp)(currentLine, newLine, prevLine, bytesPerLine);\n                break;\n            case 3:\n                (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterAverage)(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel);\n                break;\n            case 4:\n                (0,_unfilter__WEBPACK_IMPORTED_MODULE_0__.unfilterPaeth)(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel);\n                break;\n            default:\n                throw new Error(`Unsupported filter: ${data[offset]}`);\n        }\n        prevLine = newLine;\n        offset += bytesPerLine + 1;\n    }\n    if (depth === 16) {\n        const uint16Data = new Uint16Array(newData.buffer);\n        if (osIsLittleEndian) {\n            for(let k = 0; k < uint16Data.length; k++){\n                // PNG is always big endian. Swap the bytes.\n                uint16Data[k] = swap16(uint16Data[k]);\n            }\n        }\n        return uint16Data;\n    } else {\n        return newData;\n    }\n}\nfunction swap16(val) {\n    return (val & 0xff) << 8 | val >> 8 & 0xff;\n} //# sourceMappingURL=decodeInterlaceNull.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vaGVscGVycy9kZWNvZGVJbnRlcmxhY2VOdWxsLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW9HO0FBQ3BHLE1BQU1LLFNBQVMsSUFBSUMsWUFBWTtJQUFDO0NBQU87QUFDdkMsTUFBTUMsUUFBUSxJQUFJQyxXQUFXSCxPQUFPSSxNQUFNO0FBQzFDLE1BQU1DLG1CQUFtQkgsS0FBSyxDQUFDLEVBQUUsS0FBSztBQUN0QyxNQUFNSSxRQUFRLElBQUlILFdBQVc7QUFDdEIsU0FBU0ksb0JBQW9CQyxNQUFNO0lBQ3RDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxLQUFLLEVBQUUsR0FBR0w7SUFDakQsTUFBTU0sZ0JBQWdCQyxLQUFLQyxJQUFJLENBQUNILFFBQVEsS0FBS0Q7SUFDN0MsTUFBTUssZUFBZUYsS0FBS0MsSUFBSSxDQUFDLFFBQVMsSUFBS0osV0FBV0Y7SUFDeEQsTUFBTVEsVUFBVSxJQUFJZixXQUFXUSxTQUFTTTtJQUN4QyxJQUFJRSxXQUFXYjtJQUNmLElBQUljLFNBQVM7SUFDYixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlaLFFBQVFZLElBQUs7UUFDN0JGLGNBQWNaLEtBQUtlLFFBQVEsQ0FBQ0osU0FBUyxHQUFHQSxTQUFTLElBQUlIO1FBQ3JESyxVQUFVSixRQUFRTSxRQUFRLENBQUNELElBQUlOLGNBQWMsQ0FBQ00sSUFBSSxLQUFLTjtRQUN2RCxPQUFRUixJQUFJLENBQUNXLE9BQU87WUFDaEIsS0FBSztnQkFDRHhCLHVEQUFZQSxDQUFDeUIsYUFBYUMsU0FBU0w7Z0JBQ25DO1lBQ0osS0FBSztnQkFDRG5CLHNEQUFXQSxDQUFDdUIsYUFBYUMsU0FBU0wsY0FBY0g7Z0JBQ2hEO1lBQ0osS0FBSztnQkFDRGYscURBQVVBLENBQUNzQixhQUFhQyxTQUFTSCxVQUFVRjtnQkFDM0M7WUFDSixLQUFLO2dCQUNEdEIsMERBQWVBLENBQUMwQixhQUFhQyxTQUFTSCxVQUFVRixjQUFjSDtnQkFDOUQ7WUFDSixLQUFLO2dCQUNEakIsd0RBQWFBLENBQUN3QixhQUFhQyxTQUFTSCxVQUFVRixjQUFjSDtnQkFDNUQ7WUFDSjtnQkFDSSxNQUFNLElBQUlXLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRWhCLElBQUksQ0FBQ1csT0FBTyxDQUFDLENBQUM7UUFDN0Q7UUFDQUQsV0FBV0c7UUFDWEYsVUFBVUgsZUFBZTtJQUM3QjtJQUNBLElBQUlKLFVBQVUsSUFBSTtRQUNkLE1BQU1hLGFBQWEsSUFBSXpCLFlBQVlpQixRQUFRZCxNQUFNO1FBQ2pELElBQUlDLGtCQUFrQjtZQUNsQixJQUFLLElBQUlzQixJQUFJLEdBQUdBLElBQUlELFdBQVdFLE1BQU0sRUFBRUQsSUFBSztnQkFDeEMsNENBQTRDO2dCQUM1Q0QsVUFBVSxDQUFDQyxFQUFFLEdBQUdFLE9BQU9ILFVBQVUsQ0FBQ0MsRUFBRTtZQUN4QztRQUNKO1FBQ0EsT0FBT0Q7SUFDWCxPQUNLO1FBQ0QsT0FBT1I7SUFDWDtBQUNKO0FBQ0EsU0FBU1csT0FBT0MsR0FBRztJQUNmLE9BQU8sQ0FBRUEsTUFBTSxJQUFHLEtBQU0sSUFBTSxPQUFRLElBQUs7QUFDL0MsRUFDQSwrQ0FBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWxjdWxhZG9yYS1yb2kvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vaGVscGVycy9kZWNvZGVJbnRlcmxhY2VOdWxsLmpzPzRhZjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdW5maWx0ZXJBdmVyYWdlLCB1bmZpbHRlck5vbmUsIHVuZmlsdGVyUGFldGgsIHVuZmlsdGVyU3ViLCB1bmZpbHRlclVwLCB9IGZyb20gJy4vdW5maWx0ZXInO1xuY29uc3QgdWludDE2ID0gbmV3IFVpbnQxNkFycmF5KFsweDAwZmZdKTtcbmNvbnN0IHVpbnQ4ID0gbmV3IFVpbnQ4QXJyYXkodWludDE2LmJ1ZmZlcik7XG5jb25zdCBvc0lzTGl0dGxlRW5kaWFuID0gdWludDhbMF0gPT09IDB4ZmY7XG5jb25zdCBlbXB0eSA9IG5ldyBVaW50OEFycmF5KDApO1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUludGVybGFjZU51bGwocGFyYW1zKSB7XG4gICAgY29uc3QgeyBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBjaGFubmVscywgZGVwdGggfSA9IHBhcmFtcztcbiAgICBjb25zdCBieXRlc1BlclBpeGVsID0gTWF0aC5jZWlsKGRlcHRoIC8gOCkgKiBjaGFubmVscztcbiAgICBjb25zdCBieXRlc1BlckxpbmUgPSBNYXRoLmNlaWwoKGRlcHRoIC8gOCkgKiBjaGFubmVscyAqIHdpZHRoKTtcbiAgICBjb25zdCBuZXdEYXRhID0gbmV3IFVpbnQ4QXJyYXkoaGVpZ2h0ICogYnl0ZXNQZXJMaW5lKTtcbiAgICBsZXQgcHJldkxpbmUgPSBlbXB0eTtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBsZXQgY3VycmVudExpbmU7XG4gICAgbGV0IG5ld0xpbmU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoZWlnaHQ7IGkrKykge1xuICAgICAgICBjdXJyZW50TGluZSA9IGRhdGEuc3ViYXJyYXkob2Zmc2V0ICsgMSwgb2Zmc2V0ICsgMSArIGJ5dGVzUGVyTGluZSk7XG4gICAgICAgIG5ld0xpbmUgPSBuZXdEYXRhLnN1YmFycmF5KGkgKiBieXRlc1BlckxpbmUsIChpICsgMSkgKiBieXRlc1BlckxpbmUpO1xuICAgICAgICBzd2l0Y2ggKGRhdGFbb2Zmc2V0XSkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHVuZmlsdGVyTm9uZShjdXJyZW50TGluZSwgbmV3TGluZSwgYnl0ZXNQZXJMaW5lKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICB1bmZpbHRlclN1YihjdXJyZW50TGluZSwgbmV3TGluZSwgYnl0ZXNQZXJMaW5lLCBieXRlc1BlclBpeGVsKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICB1bmZpbHRlclVwKGN1cnJlbnRMaW5lLCBuZXdMaW5lLCBwcmV2TGluZSwgYnl0ZXNQZXJMaW5lKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICB1bmZpbHRlckF2ZXJhZ2UoY3VycmVudExpbmUsIG5ld0xpbmUsIHByZXZMaW5lLCBieXRlc1BlckxpbmUsIGJ5dGVzUGVyUGl4ZWwpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHVuZmlsdGVyUGFldGgoY3VycmVudExpbmUsIG5ld0xpbmUsIHByZXZMaW5lLCBieXRlc1BlckxpbmUsIGJ5dGVzUGVyUGl4ZWwpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGZpbHRlcjogJHtkYXRhW29mZnNldF19YCk7XG4gICAgICAgIH1cbiAgICAgICAgcHJldkxpbmUgPSBuZXdMaW5lO1xuICAgICAgICBvZmZzZXQgKz0gYnl0ZXNQZXJMaW5lICsgMTtcbiAgICB9XG4gICAgaWYgKGRlcHRoID09PSAxNikge1xuICAgICAgICBjb25zdCB1aW50MTZEYXRhID0gbmV3IFVpbnQxNkFycmF5KG5ld0RhdGEuYnVmZmVyKTtcbiAgICAgICAgaWYgKG9zSXNMaXR0bGVFbmRpYW4pIHtcbiAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgdWludDE2RGF0YS5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgIC8vIFBORyBpcyBhbHdheXMgYmlnIGVuZGlhbi4gU3dhcCB0aGUgYnl0ZXMuXG4gICAgICAgICAgICAgICAgdWludDE2RGF0YVtrXSA9IHN3YXAxNih1aW50MTZEYXRhW2tdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdWludDE2RGF0YTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXdEYXRhO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHN3YXAxNih2YWwpIHtcbiAgICByZXR1cm4gKCh2YWwgJiAweGZmKSA8PCA4KSB8ICgodmFsID4+IDgpICYgMHhmZik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvZGVJbnRlcmxhY2VOdWxsLmpzLm1hcCJdLCJuYW1lcyI6WyJ1bmZpbHRlckF2ZXJhZ2UiLCJ1bmZpbHRlck5vbmUiLCJ1bmZpbHRlclBhZXRoIiwidW5maWx0ZXJTdWIiLCJ1bmZpbHRlclVwIiwidWludDE2IiwiVWludDE2QXJyYXkiLCJ1aW50OCIsIlVpbnQ4QXJyYXkiLCJidWZmZXIiLCJvc0lzTGl0dGxlRW5kaWFuIiwiZW1wdHkiLCJkZWNvZGVJbnRlcmxhY2VOdWxsIiwicGFyYW1zIiwiZGF0YSIsIndpZHRoIiwiaGVpZ2h0IiwiY2hhbm5lbHMiLCJkZXB0aCIsImJ5dGVzUGVyUGl4ZWwiLCJNYXRoIiwiY2VpbCIsImJ5dGVzUGVyTGluZSIsIm5ld0RhdGEiLCJwcmV2TGluZSIsIm9mZnNldCIsImN1cnJlbnRMaW5lIiwibmV3TGluZSIsImkiLCJzdWJhcnJheSIsIkVycm9yIiwidWludDE2RGF0YSIsImsiLCJsZW5ndGgiLCJzd2FwMTYiLCJ2YWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/decodeInterlaceNull.js\n");

/***/ }),

/***/ "(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/signature.js":
/*!**********************************************************************!*\
  !*** ../../../../node_modules/fast-png/lib-esm/helpers/signature.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkSignature: () => (/* binding */ checkSignature),\n/* harmony export */   hasPngSignature: () => (/* binding */ hasPngSignature),\n/* harmony export */   writeSignature: () => (/* binding */ writeSignature)\n/* harmony export */ });\n// https://www.w3.org/TR/PNG/#5PNG-file-signature\nconst pngSignature = Uint8Array.of(137, 80, 78, 71, 13, 10, 26, 10);\nfunction writeSignature(buffer) {\n    buffer.writeBytes(pngSignature);\n}\nfunction checkSignature(buffer) {\n    if (!hasPngSignature(buffer.readBytes(pngSignature.length))) {\n        throw new Error(\"wrong PNG signature\");\n    }\n}\nfunction hasPngSignature(array) {\n    if (array.length < pngSignature.length) {\n        return false;\n    }\n    for(let i = 0; i < pngSignature.length; i++){\n        if (array[i] !== pngSignature[i]) {\n            return false;\n        }\n    }\n    return true;\n} //# sourceMappingURL=signature.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vaGVscGVycy9zaWduYXR1cmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsaURBQWlEO0FBQ2pELE1BQU1BLGVBQWVDLFdBQVdDLEVBQUUsQ0FBQyxLQUFLLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJO0FBQ3pELFNBQVNDLGVBQWVDLE1BQU07SUFDakNBLE9BQU9DLFVBQVUsQ0FBQ0w7QUFDdEI7QUFDTyxTQUFTTSxlQUFlRixNQUFNO0lBQ2pDLElBQUksQ0FBQ0csZ0JBQWdCSCxPQUFPSSxTQUFTLENBQUNSLGFBQWFTLE1BQU0sSUFBSTtRQUN6RCxNQUFNLElBQUlDLE1BQU07SUFDcEI7QUFDSjtBQUNPLFNBQVNILGdCQUFnQkksS0FBSztJQUNqQyxJQUFJQSxNQUFNRixNQUFNLEdBQUdULGFBQWFTLE1BQU0sRUFBRTtRQUNwQyxPQUFPO0lBQ1g7SUFDQSxJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSVosYUFBYVMsTUFBTSxFQUFFRyxJQUFLO1FBQzFDLElBQUlELEtBQUssQ0FBQ0MsRUFBRSxLQUFLWixZQUFZLENBQUNZLEVBQUUsRUFBRTtZQUM5QixPQUFPO1FBQ1g7SUFDSjtJQUNBLE9BQU87QUFDWCxFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NhbGN1bGFkb3JhLXJvaS8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC1wbmcvbGliLWVzbS9oZWxwZXJzL3NpZ25hdHVyZS5qcz8xYzI1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9QTkcvIzVQTkctZmlsZS1zaWduYXR1cmVcbmNvbnN0IHBuZ1NpZ25hdHVyZSA9IFVpbnQ4QXJyYXkub2YoMTM3LCA4MCwgNzgsIDcxLCAxMywgMTAsIDI2LCAxMCk7XG5leHBvcnQgZnVuY3Rpb24gd3JpdGVTaWduYXR1cmUoYnVmZmVyKSB7XG4gICAgYnVmZmVyLndyaXRlQnl0ZXMocG5nU2lnbmF0dXJlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1NpZ25hdHVyZShidWZmZXIpIHtcbiAgICBpZiAoIWhhc1BuZ1NpZ25hdHVyZShidWZmZXIucmVhZEJ5dGVzKHBuZ1NpZ25hdHVyZS5sZW5ndGgpKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIFBORyBzaWduYXR1cmUnKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaGFzUG5nU2lnbmF0dXJlKGFycmF5KSB7XG4gICAgaWYgKGFycmF5Lmxlbmd0aCA8IHBuZ1NpZ25hdHVyZS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBuZ1NpZ25hdHVyZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYXJyYXlbaV0gIT09IHBuZ1NpZ25hdHVyZVtpXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2lnbmF0dXJlLmpzLm1hcCJdLCJuYW1lcyI6WyJwbmdTaWduYXR1cmUiLCJVaW50OEFycmF5Iiwib2YiLCJ3cml0ZVNpZ25hdHVyZSIsImJ1ZmZlciIsIndyaXRlQnl0ZXMiLCJjaGVja1NpZ25hdHVyZSIsImhhc1BuZ1NpZ25hdHVyZSIsInJlYWRCeXRlcyIsImxlbmd0aCIsIkVycm9yIiwiYXJyYXkiLCJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/signature.js\n");

/***/ }),

/***/ "(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/text.js":
/*!*****************************************************************!*\
  !*** ../../../../node_modules/fast-png/lib-esm/helpers/text.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodetEXt: () => (/* binding */ decodetEXt),\n/* harmony export */   encodetEXt: () => (/* binding */ encodetEXt),\n/* harmony export */   readKeyword: () => (/* binding */ readKeyword),\n/* harmony export */   readLatin1: () => (/* binding */ readLatin1),\n/* harmony export */   textChunkName: () => (/* binding */ textChunkName)\n/* harmony export */ });\n/* harmony import */ var _crc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./crc */ \"(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/crc.js\");\n\n// https://www.w3.org/TR/png/#11tEXt\nconst textChunkName = \"tEXt\";\nconst NULL = 0;\nconst latin1Decoder = new TextDecoder(\"latin1\");\nfunction validateKeyword(keyword) {\n    validateLatin1(keyword);\n    if (keyword.length === 0 || keyword.length > 79) {\n        throw new Error(\"keyword length must be between 1 and 79\");\n    }\n}\n// eslint-disable-next-line no-control-regex\nconst latin1Regex = /^[\\u0000-\\u00FF]*$/;\nfunction validateLatin1(text) {\n    if (!latin1Regex.test(text)) {\n        throw new Error(\"invalid latin1 text\");\n    }\n}\nfunction decodetEXt(text, buffer, length) {\n    const keyword = readKeyword(buffer);\n    text[keyword] = readLatin1(buffer, length - keyword.length - 1);\n}\nfunction encodetEXt(buffer, keyword, text) {\n    validateKeyword(keyword);\n    validateLatin1(text);\n    const length = keyword.length + 1 /* NULL */  + text.length;\n    buffer.writeUint32(length);\n    buffer.writeChars(textChunkName);\n    buffer.writeChars(keyword);\n    buffer.writeByte(NULL);\n    buffer.writeChars(text);\n    (0,_crc__WEBPACK_IMPORTED_MODULE_0__.writeCrc)(buffer, length + 4);\n}\n// https://www.w3.org/TR/png/#11keywords\nfunction readKeyword(buffer) {\n    buffer.mark();\n    while(buffer.readByte() !== NULL){\n    /* advance */ }\n    const end = buffer.offset;\n    buffer.reset();\n    const keyword = latin1Decoder.decode(buffer.readBytes(end - buffer.offset - 1));\n    // NULL\n    buffer.skip(1);\n    validateKeyword(keyword);\n    return keyword;\n}\nfunction readLatin1(buffer, length) {\n    return latin1Decoder.decode(buffer.readBytes(length));\n} //# sourceMappingURL=text.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vaGVscGVycy90ZXh0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFpQztBQUNqQyxvQ0FBb0M7QUFDN0IsTUFBTUMsZ0JBQWdCLE9BQU87QUFDcEMsTUFBTUMsT0FBTztBQUNiLE1BQU1DLGdCQUFnQixJQUFJQyxZQUFZO0FBQ3RDLFNBQVNDLGdCQUFnQkMsT0FBTztJQUM1QkMsZUFBZUQ7SUFDZixJQUFJQSxRQUFRRSxNQUFNLEtBQUssS0FBS0YsUUFBUUUsTUFBTSxHQUFHLElBQUk7UUFDN0MsTUFBTSxJQUFJQyxNQUFNO0lBQ3BCO0FBQ0o7QUFDQSw0Q0FBNEM7QUFDNUMsTUFBTUMsY0FBYztBQUNwQixTQUFTSCxlQUFlSSxJQUFJO0lBQ3hCLElBQUksQ0FBQ0QsWUFBWUUsSUFBSSxDQUFDRCxPQUFPO1FBQ3pCLE1BQU0sSUFBSUYsTUFBTTtJQUNwQjtBQUNKO0FBQ08sU0FBU0ksV0FBV0YsSUFBSSxFQUFFRyxNQUFNLEVBQUVOLE1BQU07SUFDM0MsTUFBTUYsVUFBVVMsWUFBWUQ7SUFDNUJILElBQUksQ0FBQ0wsUUFBUSxHQUFHVSxXQUFXRixRQUFRTixTQUFTRixRQUFRRSxNQUFNLEdBQUc7QUFDakU7QUFDTyxTQUFTUyxXQUFXSCxNQUFNLEVBQUVSLE9BQU8sRUFBRUssSUFBSTtJQUM1Q04sZ0JBQWdCQztJQUNoQkMsZUFBZUk7SUFDZixNQUFNSCxTQUFTRixRQUFRRSxNQUFNLEdBQUcsRUFBRSxRQUFRLE1BQUtHLEtBQUtILE1BQU07SUFDMURNLE9BQU9JLFdBQVcsQ0FBQ1Y7SUFDbkJNLE9BQU9LLFVBQVUsQ0FBQ2xCO0lBQ2xCYSxPQUFPSyxVQUFVLENBQUNiO0lBQ2xCUSxPQUFPTSxTQUFTLENBQUNsQjtJQUNqQlksT0FBT0ssVUFBVSxDQUFDUjtJQUNsQlgsOENBQVFBLENBQUNjLFFBQVFOLFNBQVM7QUFDOUI7QUFDQSx3Q0FBd0M7QUFDakMsU0FBU08sWUFBWUQsTUFBTTtJQUM5QkEsT0FBT08sSUFBSTtJQUNYLE1BQU9QLE9BQU9RLFFBQVEsT0FBT3BCLEtBQU07SUFDL0IsV0FBVyxHQUNmO0lBQ0EsTUFBTXFCLE1BQU1ULE9BQU9VLE1BQU07SUFDekJWLE9BQU9XLEtBQUs7SUFDWixNQUFNbkIsVUFBVUgsY0FBY3VCLE1BQU0sQ0FBQ1osT0FBT2EsU0FBUyxDQUFDSixNQUFNVCxPQUFPVSxNQUFNLEdBQUc7SUFDNUUsT0FBTztJQUNQVixPQUFPYyxJQUFJLENBQUM7SUFDWnZCLGdCQUFnQkM7SUFDaEIsT0FBT0E7QUFDWDtBQUNPLFNBQVNVLFdBQVdGLE1BQU0sRUFBRU4sTUFBTTtJQUNyQyxPQUFPTCxjQUFjdUIsTUFBTSxDQUFDWixPQUFPYSxTQUFTLENBQUNuQjtBQUNqRCxFQUNBLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NhbGN1bGFkb3JhLXJvaS8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC1wbmcvbGliLWVzbS9oZWxwZXJzL3RleHQuanM/YzYwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3cml0ZUNyYyB9IGZyb20gJy4vY3JjJztcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9wbmcvIzExdEVYdFxuZXhwb3J0IGNvbnN0IHRleHRDaHVua05hbWUgPSAndEVYdCc7XG5jb25zdCBOVUxMID0gMDtcbmNvbnN0IGxhdGluMURlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoJ2xhdGluMScpO1xuZnVuY3Rpb24gdmFsaWRhdGVLZXl3b3JkKGtleXdvcmQpIHtcbiAgICB2YWxpZGF0ZUxhdGluMShrZXl3b3JkKTtcbiAgICBpZiAoa2V5d29yZC5sZW5ndGggPT09IDAgfHwga2V5d29yZC5sZW5ndGggPiA3OSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2tleXdvcmQgbGVuZ3RoIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3OScpO1xuICAgIH1cbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG5jb25zdCBsYXRpbjFSZWdleCA9IC9eW1xcdTAwMDAtXFx1MDBGRl0qJC87XG5mdW5jdGlvbiB2YWxpZGF0ZUxhdGluMSh0ZXh0KSB7XG4gICAgaWYgKCFsYXRpbjFSZWdleC50ZXN0KHRleHQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBsYXRpbjEgdGV4dCcpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGV0RVh0KHRleHQsIGJ1ZmZlciwgbGVuZ3RoKSB7XG4gICAgY29uc3Qga2V5d29yZCA9IHJlYWRLZXl3b3JkKGJ1ZmZlcik7XG4gICAgdGV4dFtrZXl3b3JkXSA9IHJlYWRMYXRpbjEoYnVmZmVyLCBsZW5ndGggLSBrZXl3b3JkLmxlbmd0aCAtIDEpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZXRFWHQoYnVmZmVyLCBrZXl3b3JkLCB0ZXh0KSB7XG4gICAgdmFsaWRhdGVLZXl3b3JkKGtleXdvcmQpO1xuICAgIHZhbGlkYXRlTGF0aW4xKHRleHQpO1xuICAgIGNvbnN0IGxlbmd0aCA9IGtleXdvcmQubGVuZ3RoICsgMSAvKiBOVUxMICovICsgdGV4dC5sZW5ndGg7XG4gICAgYnVmZmVyLndyaXRlVWludDMyKGxlbmd0aCk7XG4gICAgYnVmZmVyLndyaXRlQ2hhcnModGV4dENodW5rTmFtZSk7XG4gICAgYnVmZmVyLndyaXRlQ2hhcnMoa2V5d29yZCk7XG4gICAgYnVmZmVyLndyaXRlQnl0ZShOVUxMKTtcbiAgICBidWZmZXIud3JpdGVDaGFycyh0ZXh0KTtcbiAgICB3cml0ZUNyYyhidWZmZXIsIGxlbmd0aCArIDQpO1xufVxuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3BuZy8jMTFrZXl3b3Jkc1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRLZXl3b3JkKGJ1ZmZlcikge1xuICAgIGJ1ZmZlci5tYXJrKCk7XG4gICAgd2hpbGUgKGJ1ZmZlci5yZWFkQnl0ZSgpICE9PSBOVUxMKSB7XG4gICAgICAgIC8qIGFkdmFuY2UgKi9cbiAgICB9XG4gICAgY29uc3QgZW5kID0gYnVmZmVyLm9mZnNldDtcbiAgICBidWZmZXIucmVzZXQoKTtcbiAgICBjb25zdCBrZXl3b3JkID0gbGF0aW4xRGVjb2Rlci5kZWNvZGUoYnVmZmVyLnJlYWRCeXRlcyhlbmQgLSBidWZmZXIub2Zmc2V0IC0gMSkpO1xuICAgIC8vIE5VTExcbiAgICBidWZmZXIuc2tpcCgxKTtcbiAgICB2YWxpZGF0ZUtleXdvcmQoa2V5d29yZCk7XG4gICAgcmV0dXJuIGtleXdvcmQ7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVhZExhdGluMShidWZmZXIsIGxlbmd0aCkge1xuICAgIHJldHVybiBsYXRpbjFEZWNvZGVyLmRlY29kZShidWZmZXIucmVhZEJ5dGVzKGxlbmd0aCkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGV4dC5qcy5tYXAiXSwibmFtZXMiOlsid3JpdGVDcmMiLCJ0ZXh0Q2h1bmtOYW1lIiwiTlVMTCIsImxhdGluMURlY29kZXIiLCJUZXh0RGVjb2RlciIsInZhbGlkYXRlS2V5d29yZCIsImtleXdvcmQiLCJ2YWxpZGF0ZUxhdGluMSIsImxlbmd0aCIsIkVycm9yIiwibGF0aW4xUmVnZXgiLCJ0ZXh0IiwidGVzdCIsImRlY29kZXRFWHQiLCJidWZmZXIiLCJyZWFkS2V5d29yZCIsInJlYWRMYXRpbjEiLCJlbmNvZGV0RVh0Iiwid3JpdGVVaW50MzIiLCJ3cml0ZUNoYXJzIiwid3JpdGVCeXRlIiwibWFyayIsInJlYWRCeXRlIiwiZW5kIiwib2Zmc2V0IiwicmVzZXQiLCJkZWNvZGUiLCJyZWFkQnl0ZXMiLCJza2lwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/text.js\n");

/***/ }),

/***/ "(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/unfilter.js":
/*!*********************************************************************!*\
  !*** ../../../../node_modules/fast-png/lib-esm/helpers/unfilter.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   unfilterAverage: () => (/* binding */ unfilterAverage),\n/* harmony export */   unfilterNone: () => (/* binding */ unfilterNone),\n/* harmony export */   unfilterPaeth: () => (/* binding */ unfilterPaeth),\n/* harmony export */   unfilterSub: () => (/* binding */ unfilterSub),\n/* harmony export */   unfilterUp: () => (/* binding */ unfilterUp)\n/* harmony export */ });\nfunction unfilterNone(currentLine, newLine, bytesPerLine) {\n    for(let i = 0; i < bytesPerLine; i++){\n        newLine[i] = currentLine[i];\n    }\n}\nfunction unfilterSub(currentLine, newLine, bytesPerLine, bytesPerPixel) {\n    let i = 0;\n    for(; i < bytesPerPixel; i++){\n        // just copy first bytes\n        newLine[i] = currentLine[i];\n    }\n    for(; i < bytesPerLine; i++){\n        newLine[i] = currentLine[i] + newLine[i - bytesPerPixel] & 0xff;\n    }\n}\nfunction unfilterUp(currentLine, newLine, prevLine, bytesPerLine) {\n    let i = 0;\n    if (prevLine.length === 0) {\n        // just copy bytes for first line\n        for(; i < bytesPerLine; i++){\n            newLine[i] = currentLine[i];\n        }\n    } else {\n        for(; i < bytesPerLine; i++){\n            newLine[i] = currentLine[i] + prevLine[i] & 0xff;\n        }\n    }\n}\nfunction unfilterAverage(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel) {\n    let i = 0;\n    if (prevLine.length === 0) {\n        for(; i < bytesPerPixel; i++){\n            newLine[i] = currentLine[i];\n        }\n        for(; i < bytesPerLine; i++){\n            newLine[i] = currentLine[i] + (newLine[i - bytesPerPixel] >> 1) & 0xff;\n        }\n    } else {\n        for(; i < bytesPerPixel; i++){\n            newLine[i] = currentLine[i] + (prevLine[i] >> 1) & 0xff;\n        }\n        for(; i < bytesPerLine; i++){\n            newLine[i] = currentLine[i] + (newLine[i - bytesPerPixel] + prevLine[i] >> 1) & 0xff;\n        }\n    }\n}\nfunction unfilterPaeth(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel) {\n    let i = 0;\n    if (prevLine.length === 0) {\n        for(; i < bytesPerPixel; i++){\n            newLine[i] = currentLine[i];\n        }\n        for(; i < bytesPerLine; i++){\n            newLine[i] = currentLine[i] + newLine[i - bytesPerPixel] & 0xff;\n        }\n    } else {\n        for(; i < bytesPerPixel; i++){\n            newLine[i] = currentLine[i] + prevLine[i] & 0xff;\n        }\n        for(; i < bytesPerLine; i++){\n            newLine[i] = currentLine[i] + paethPredictor(newLine[i - bytesPerPixel], prevLine[i], prevLine[i - bytesPerPixel]) & 0xff;\n        }\n    }\n}\nfunction paethPredictor(a, b, c) {\n    const p = a + b - c;\n    const pa = Math.abs(p - a);\n    const pb = Math.abs(p - b);\n    const pc = Math.abs(p - c);\n    if (pa <= pb && pa <= pc) return a;\n    else if (pb <= pc) return b;\n    else return c;\n} //# sourceMappingURL=unfilter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vaGVscGVycy91bmZpbHRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFPLFNBQVNBLGFBQWFDLFdBQVcsRUFBRUMsT0FBTyxFQUFFQyxZQUFZO0lBQzNELElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJRCxjQUFjQyxJQUFLO1FBQ25DRixPQUFPLENBQUNFLEVBQUUsR0FBR0gsV0FBVyxDQUFDRyxFQUFFO0lBQy9CO0FBQ0o7QUFDTyxTQUFTQyxZQUFZSixXQUFXLEVBQUVDLE9BQU8sRUFBRUMsWUFBWSxFQUFFRyxhQUFhO0lBQ3pFLElBQUlGLElBQUk7SUFDUixNQUFPQSxJQUFJRSxlQUFlRixJQUFLO1FBQzNCLHdCQUF3QjtRQUN4QkYsT0FBTyxDQUFDRSxFQUFFLEdBQUdILFdBQVcsQ0FBQ0csRUFBRTtJQUMvQjtJQUNBLE1BQU9BLElBQUlELGNBQWNDLElBQUs7UUFDMUJGLE9BQU8sQ0FBQ0UsRUFBRSxHQUFHLFdBQVksQ0FBQ0EsRUFBRSxHQUFHRixPQUFPLENBQUNFLElBQUlFLGNBQWMsR0FBSTtJQUNqRTtBQUNKO0FBQ08sU0FBU0MsV0FBV04sV0FBVyxFQUFFQyxPQUFPLEVBQUVNLFFBQVEsRUFBRUwsWUFBWTtJQUNuRSxJQUFJQyxJQUFJO0lBQ1IsSUFBSUksU0FBU0MsTUFBTSxLQUFLLEdBQUc7UUFDdkIsaUNBQWlDO1FBQ2pDLE1BQU9MLElBQUlELGNBQWNDLElBQUs7WUFDMUJGLE9BQU8sQ0FBQ0UsRUFBRSxHQUFHSCxXQUFXLENBQUNHLEVBQUU7UUFDL0I7SUFDSixPQUNLO1FBQ0QsTUFBT0EsSUFBSUQsY0FBY0MsSUFBSztZQUMxQkYsT0FBTyxDQUFDRSxFQUFFLEdBQUcsV0FBWSxDQUFDQSxFQUFFLEdBQUdJLFFBQVEsQ0FBQ0osRUFBRSxHQUFJO1FBQ2xEO0lBQ0o7QUFDSjtBQUNPLFNBQVNNLGdCQUFnQlQsV0FBVyxFQUFFQyxPQUFPLEVBQUVNLFFBQVEsRUFBRUwsWUFBWSxFQUFFRyxhQUFhO0lBQ3ZGLElBQUlGLElBQUk7SUFDUixJQUFJSSxTQUFTQyxNQUFNLEtBQUssR0FBRztRQUN2QixNQUFPTCxJQUFJRSxlQUFlRixJQUFLO1lBQzNCRixPQUFPLENBQUNFLEVBQUUsR0FBR0gsV0FBVyxDQUFDRyxFQUFFO1FBQy9CO1FBQ0EsTUFBT0EsSUFBSUQsY0FBY0MsSUFBSztZQUMxQkYsT0FBTyxDQUFDRSxFQUFFLEdBQUcsV0FBWSxDQUFDQSxFQUFFLEdBQUlGLENBQUFBLE9BQU8sQ0FBQ0UsSUFBSUUsY0FBYyxJQUFJLEtBQU07UUFDeEU7SUFDSixPQUNLO1FBQ0QsTUFBT0YsSUFBSUUsZUFBZUYsSUFBSztZQUMzQkYsT0FBTyxDQUFDRSxFQUFFLEdBQUcsV0FBWSxDQUFDQSxFQUFFLEdBQUlJLENBQUFBLFFBQVEsQ0FBQ0osRUFBRSxJQUFJLEtBQU07UUFDekQ7UUFDQSxNQUFPQSxJQUFJRCxjQUFjQyxJQUFLO1lBQzFCRixPQUFPLENBQUNFLEVBQUUsR0FDTixXQUFZLENBQUNBLEVBQUUsR0FBSSxRQUFRLENBQUNBLElBQUlFLGNBQWMsR0FBR0UsUUFBUSxDQUFDSixFQUFFLElBQUssS0FDN0Q7UUFDWjtJQUNKO0FBQ0o7QUFDTyxTQUFTTyxjQUFjVixXQUFXLEVBQUVDLE9BQU8sRUFBRU0sUUFBUSxFQUFFTCxZQUFZLEVBQUVHLGFBQWE7SUFDckYsSUFBSUYsSUFBSTtJQUNSLElBQUlJLFNBQVNDLE1BQU0sS0FBSyxHQUFHO1FBQ3ZCLE1BQU9MLElBQUlFLGVBQWVGLElBQUs7WUFDM0JGLE9BQU8sQ0FBQ0UsRUFBRSxHQUFHSCxXQUFXLENBQUNHLEVBQUU7UUFDL0I7UUFDQSxNQUFPQSxJQUFJRCxjQUFjQyxJQUFLO1lBQzFCRixPQUFPLENBQUNFLEVBQUUsR0FBRyxXQUFZLENBQUNBLEVBQUUsR0FBR0YsT0FBTyxDQUFDRSxJQUFJRSxjQUFjLEdBQUk7UUFDakU7SUFDSixPQUNLO1FBQ0QsTUFBT0YsSUFBSUUsZUFBZUYsSUFBSztZQUMzQkYsT0FBTyxDQUFDRSxFQUFFLEdBQUcsV0FBWSxDQUFDQSxFQUFFLEdBQUdJLFFBQVEsQ0FBQ0osRUFBRSxHQUFJO1FBQ2xEO1FBQ0EsTUFBT0EsSUFBSUQsY0FBY0MsSUFBSztZQUMxQkYsT0FBTyxDQUFDRSxFQUFFLEdBQ04sV0FBWSxDQUFDQSxFQUFFLEdBQ1hRLGVBQWVWLE9BQU8sQ0FBQ0UsSUFBSUUsY0FBYyxFQUFFRSxRQUFRLENBQUNKLEVBQUUsRUFBRUksUUFBUSxDQUFDSixJQUFJRSxjQUFjLElBQ25GO1FBQ1o7SUFDSjtBQUNKO0FBQ0EsU0FBU00sZUFBZUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUM7SUFDM0IsTUFBTUMsSUFBSUgsSUFBSUMsSUFBSUM7SUFDbEIsTUFBTUUsS0FBS0MsS0FBS0MsR0FBRyxDQUFDSCxJQUFJSDtJQUN4QixNQUFNTyxLQUFLRixLQUFLQyxHQUFHLENBQUNILElBQUlGO0lBQ3hCLE1BQU1PLEtBQUtILEtBQUtDLEdBQUcsQ0FBQ0gsSUFBSUQ7SUFDeEIsSUFBSUUsTUFBTUcsTUFBTUgsTUFBTUksSUFDbEIsT0FBT1I7U0FDTixJQUFJTyxNQUFNQyxJQUNYLE9BQU9QO1NBRVAsT0FBT0M7QUFDZixFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NhbGN1bGFkb3JhLXJvaS8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC1wbmcvbGliLWVzbS9oZWxwZXJzL3VuZmlsdGVyLmpzPzNkNmMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHVuZmlsdGVyTm9uZShjdXJyZW50TGluZSwgbmV3TGluZSwgYnl0ZXNQZXJMaW5lKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlc1BlckxpbmU7IGkrKykge1xuICAgICAgICBuZXdMaW5lW2ldID0gY3VycmVudExpbmVbaV07XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHVuZmlsdGVyU3ViKGN1cnJlbnRMaW5lLCBuZXdMaW5lLCBieXRlc1BlckxpbmUsIGJ5dGVzUGVyUGl4ZWwpIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBieXRlc1BlclBpeGVsOyBpKyspIHtcbiAgICAgICAgLy8ganVzdCBjb3B5IGZpcnN0IGJ5dGVzXG4gICAgICAgIG5ld0xpbmVbaV0gPSBjdXJyZW50TGluZVtpXTtcbiAgICB9XG4gICAgZm9yICg7IGkgPCBieXRlc1BlckxpbmU7IGkrKykge1xuICAgICAgICBuZXdMaW5lW2ldID0gKGN1cnJlbnRMaW5lW2ldICsgbmV3TGluZVtpIC0gYnl0ZXNQZXJQaXhlbF0pICYgMHhmZjtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gdW5maWx0ZXJVcChjdXJyZW50TGluZSwgbmV3TGluZSwgcHJldkxpbmUsIGJ5dGVzUGVyTGluZSkge1xuICAgIGxldCBpID0gMDtcbiAgICBpZiAocHJldkxpbmUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIGp1c3QgY29weSBieXRlcyBmb3IgZmlyc3QgbGluZVxuICAgICAgICBmb3IgKDsgaSA8IGJ5dGVzUGVyTGluZTsgaSsrKSB7XG4gICAgICAgICAgICBuZXdMaW5lW2ldID0gY3VycmVudExpbmVbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZvciAoOyBpIDwgYnl0ZXNQZXJMaW5lOyBpKyspIHtcbiAgICAgICAgICAgIG5ld0xpbmVbaV0gPSAoY3VycmVudExpbmVbaV0gKyBwcmV2TGluZVtpXSkgJiAweGZmO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHVuZmlsdGVyQXZlcmFnZShjdXJyZW50TGluZSwgbmV3TGluZSwgcHJldkxpbmUsIGJ5dGVzUGVyTGluZSwgYnl0ZXNQZXJQaXhlbCkge1xuICAgIGxldCBpID0gMDtcbiAgICBpZiAocHJldkxpbmUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGZvciAoOyBpIDwgYnl0ZXNQZXJQaXhlbDsgaSsrKSB7XG4gICAgICAgICAgICBuZXdMaW5lW2ldID0gY3VycmVudExpbmVbaV07XG4gICAgICAgIH1cbiAgICAgICAgZm9yICg7IGkgPCBieXRlc1BlckxpbmU7IGkrKykge1xuICAgICAgICAgICAgbmV3TGluZVtpXSA9IChjdXJyZW50TGluZVtpXSArIChuZXdMaW5lW2kgLSBieXRlc1BlclBpeGVsXSA+PiAxKSkgJiAweGZmO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmb3IgKDsgaSA8IGJ5dGVzUGVyUGl4ZWw7IGkrKykge1xuICAgICAgICAgICAgbmV3TGluZVtpXSA9IChjdXJyZW50TGluZVtpXSArIChwcmV2TGluZVtpXSA+PiAxKSkgJiAweGZmO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoOyBpIDwgYnl0ZXNQZXJMaW5lOyBpKyspIHtcbiAgICAgICAgICAgIG5ld0xpbmVbaV0gPVxuICAgICAgICAgICAgICAgIChjdXJyZW50TGluZVtpXSArICgobmV3TGluZVtpIC0gYnl0ZXNQZXJQaXhlbF0gKyBwcmV2TGluZVtpXSkgPj4gMSkpICZcbiAgICAgICAgICAgICAgICAgICAgMHhmZjtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiB1bmZpbHRlclBhZXRoKGN1cnJlbnRMaW5lLCBuZXdMaW5lLCBwcmV2TGluZSwgYnl0ZXNQZXJMaW5lLCBieXRlc1BlclBpeGVsKSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIGlmIChwcmV2TGluZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZm9yICg7IGkgPCBieXRlc1BlclBpeGVsOyBpKyspIHtcbiAgICAgICAgICAgIG5ld0xpbmVbaV0gPSBjdXJyZW50TGluZVtpXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKDsgaSA8IGJ5dGVzUGVyTGluZTsgaSsrKSB7XG4gICAgICAgICAgICBuZXdMaW5lW2ldID0gKGN1cnJlbnRMaW5lW2ldICsgbmV3TGluZVtpIC0gYnl0ZXNQZXJQaXhlbF0pICYgMHhmZjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZm9yICg7IGkgPCBieXRlc1BlclBpeGVsOyBpKyspIHtcbiAgICAgICAgICAgIG5ld0xpbmVbaV0gPSAoY3VycmVudExpbmVbaV0gKyBwcmV2TGluZVtpXSkgJiAweGZmO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoOyBpIDwgYnl0ZXNQZXJMaW5lOyBpKyspIHtcbiAgICAgICAgICAgIG5ld0xpbmVbaV0gPVxuICAgICAgICAgICAgICAgIChjdXJyZW50TGluZVtpXSArXG4gICAgICAgICAgICAgICAgICAgIHBhZXRoUHJlZGljdG9yKG5ld0xpbmVbaSAtIGJ5dGVzUGVyUGl4ZWxdLCBwcmV2TGluZVtpXSwgcHJldkxpbmVbaSAtIGJ5dGVzUGVyUGl4ZWxdKSkgJlxuICAgICAgICAgICAgICAgICAgICAweGZmO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gcGFldGhQcmVkaWN0b3IoYSwgYiwgYykge1xuICAgIGNvbnN0IHAgPSBhICsgYiAtIGM7XG4gICAgY29uc3QgcGEgPSBNYXRoLmFicyhwIC0gYSk7XG4gICAgY29uc3QgcGIgPSBNYXRoLmFicyhwIC0gYik7XG4gICAgY29uc3QgcGMgPSBNYXRoLmFicyhwIC0gYyk7XG4gICAgaWYgKHBhIDw9IHBiICYmIHBhIDw9IHBjKVxuICAgICAgICByZXR1cm4gYTtcbiAgICBlbHNlIGlmIChwYiA8PSBwYylcbiAgICAgICAgcmV0dXJuIGI7XG4gICAgZWxzZVxuICAgICAgICByZXR1cm4gYztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVuZmlsdGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJ1bmZpbHRlck5vbmUiLCJjdXJyZW50TGluZSIsIm5ld0xpbmUiLCJieXRlc1BlckxpbmUiLCJpIiwidW5maWx0ZXJTdWIiLCJieXRlc1BlclBpeGVsIiwidW5maWx0ZXJVcCIsInByZXZMaW5lIiwibGVuZ3RoIiwidW5maWx0ZXJBdmVyYWdlIiwidW5maWx0ZXJQYWV0aCIsInBhZXRoUHJlZGljdG9yIiwiYSIsImIiLCJjIiwicCIsInBhIiwiTWF0aCIsImFicyIsInBiIiwicGMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/unfilter.js\n");

/***/ }),

/***/ "(ssr)/../../../../node_modules/fast-png/lib-esm/index.js":
/*!**********************************************************!*\
  !*** ../../../../node_modules/fast-png/lib-esm/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResolutionUnitSpecifier: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_3__.ResolutionUnitSpecifier),\n/* harmony export */   convertIndexedToRgb: () => (/* reexport safe */ _convertIndexedToRgb__WEBPACK_IMPORTED_MODULE_4__.convertIndexedToRgb),\n/* harmony export */   decode: () => (/* binding */ decodePng),\n/* harmony export */   decodeApng: () => (/* binding */ decodeApng),\n/* harmony export */   encode: () => (/* binding */ encodePng),\n/* harmony export */   hasPngSignature: () => (/* reexport safe */ _helpers_signature__WEBPACK_IMPORTED_MODULE_2__.hasPngSignature)\n/* harmony export */ });\n/* harmony import */ var _PngDecoder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PngDecoder */ \"(ssr)/../../../../node_modules/fast-png/lib-esm/PngDecoder.js\");\n/* harmony import */ var _PngEncoder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PngEncoder */ \"(ssr)/../../../../node_modules/fast-png/lib-esm/PngEncoder.js\");\n/* harmony import */ var _helpers_signature__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/signature */ \"(ssr)/../../../../node_modules/fast-png/lib-esm/helpers/signature.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types */ \"(ssr)/../../../../node_modules/fast-png/lib-esm/types.js\");\n/* harmony import */ var _convertIndexedToRgb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./convertIndexedToRgb */ \"(ssr)/../../../../node_modules/fast-png/lib-esm/convertIndexedToRgb.js\");\n\n\n\n\nfunction decodePng(data, options) {\n    const decoder = new _PngDecoder__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data, options);\n    return decoder.decode();\n}\nfunction encodePng(png, options) {\n    const encoder = new _PngEncoder__WEBPACK_IMPORTED_MODULE_1__[\"default\"](png, options);\n    return encoder.encode();\n}\nfunction decodeApng(data, options) {\n    const decoder = new _PngDecoder__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data, options);\n    return decoder.decodeApng();\n}\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBc0M7QUFDQTtBQUNnQjtBQUM5QjtBQUN4QixTQUFTRyxVQUFVQyxJQUFJLEVBQUVDLE9BQU87SUFDNUIsTUFBTUMsVUFBVSxJQUFJTixtREFBVUEsQ0FBQ0ksTUFBTUM7SUFDckMsT0FBT0MsUUFBUUMsTUFBTTtBQUN6QjtBQUNBLFNBQVNDLFVBQVVDLEdBQUcsRUFBRUosT0FBTztJQUMzQixNQUFNSyxVQUFVLElBQUlULG1EQUFVQSxDQUFDUSxLQUFLSjtJQUNwQyxPQUFPSyxRQUFRQyxNQUFNO0FBQ3pCO0FBQ0EsU0FBU0MsV0FBV1IsSUFBSSxFQUFFQyxPQUFPO0lBQzdCLE1BQU1DLFVBQVUsSUFBSU4sbURBQVVBLENBQUNJLE1BQU1DO0lBQ3JDLE9BQU9DLFFBQVFNLFVBQVU7QUFDN0I7QUFDZ0U7QUFDSixDQUM1RCxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWxjdWxhZG9yYS1yb2kvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vaW5kZXguanM/NjJjYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUG5nRGVjb2RlciBmcm9tICcuL1BuZ0RlY29kZXInO1xuaW1wb3J0IFBuZ0VuY29kZXIgZnJvbSAnLi9QbmdFbmNvZGVyJztcbmV4cG9ydCB7IGhhc1BuZ1NpZ25hdHVyZSB9IGZyb20gJy4vaGVscGVycy9zaWduYXR1cmUnO1xuZXhwb3J0ICogZnJvbSAnLi90eXBlcyc7XG5mdW5jdGlvbiBkZWNvZGVQbmcoZGF0YSwgb3B0aW9ucykge1xuICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgUG5nRGVjb2RlcihkYXRhLCBvcHRpb25zKTtcbiAgICByZXR1cm4gZGVjb2Rlci5kZWNvZGUoKTtcbn1cbmZ1bmN0aW9uIGVuY29kZVBuZyhwbmcsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBlbmNvZGVyID0gbmV3IFBuZ0VuY29kZXIocG5nLCBvcHRpb25zKTtcbiAgICByZXR1cm4gZW5jb2Rlci5lbmNvZGUoKTtcbn1cbmZ1bmN0aW9uIGRlY29kZUFwbmcoZGF0YSwgb3B0aW9ucykge1xuICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgUG5nRGVjb2RlcihkYXRhLCBvcHRpb25zKTtcbiAgICByZXR1cm4gZGVjb2Rlci5kZWNvZGVBcG5nKCk7XG59XG5leHBvcnQgeyBkZWNvZGVQbmcgYXMgZGVjb2RlLCBlbmNvZGVQbmcgYXMgZW5jb2RlLCBkZWNvZGVBcG5nIH07XG5leHBvcnQgeyBjb252ZXJ0SW5kZXhlZFRvUmdiIH0gZnJvbSAnLi9jb252ZXJ0SW5kZXhlZFRvUmdiJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJQbmdEZWNvZGVyIiwiUG5nRW5jb2RlciIsImhhc1BuZ1NpZ25hdHVyZSIsImRlY29kZVBuZyIsImRhdGEiLCJvcHRpb25zIiwiZGVjb2RlciIsImRlY29kZSIsImVuY29kZVBuZyIsInBuZyIsImVuY29kZXIiLCJlbmNvZGUiLCJkZWNvZGVBcG5nIiwiY29udmVydEluZGV4ZWRUb1JnYiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../node_modules/fast-png/lib-esm/index.js\n");

/***/ }),

/***/ "(ssr)/../../../../node_modules/fast-png/lib-esm/internalTypes.js":
/*!******************************************************************!*\
  !*** ../../../../node_modules/fast-png/lib-esm/internalTypes.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlendOpType: () => (/* binding */ BlendOpType),\n/* harmony export */   ColorType: () => (/* binding */ ColorType),\n/* harmony export */   CompressionMethod: () => (/* binding */ CompressionMethod),\n/* harmony export */   DisposeOpType: () => (/* binding */ DisposeOpType),\n/* harmony export */   FilterMethod: () => (/* binding */ FilterMethod),\n/* harmony export */   InterlaceMethod: () => (/* binding */ InterlaceMethod)\n/* harmony export */ });\nconst ColorType = {\n    UNKNOWN: -1,\n    GREYSCALE: 0,\n    TRUECOLOUR: 2,\n    INDEXED_COLOUR: 3,\n    GREYSCALE_ALPHA: 4,\n    TRUECOLOUR_ALPHA: 6\n};\nconst CompressionMethod = {\n    UNKNOWN: -1,\n    DEFLATE: 0\n};\nconst FilterMethod = {\n    UNKNOWN: -1,\n    ADAPTIVE: 0\n};\nconst InterlaceMethod = {\n    UNKNOWN: -1,\n    NO_INTERLACE: 0,\n    ADAM7: 1\n};\nconst DisposeOpType = {\n    NONE: 0,\n    BACKGROUND: 1,\n    PREVIOUS: 2\n};\nconst BlendOpType = {\n    SOURCE: 0,\n    OVER: 1\n}; //# sourceMappingURL=internalTypes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vaW50ZXJuYWxUeXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBTyxNQUFNQSxZQUFZO0lBQ3JCQyxTQUFTLENBQUM7SUFDVkMsV0FBVztJQUNYQyxZQUFZO0lBQ1pDLGdCQUFnQjtJQUNoQkMsaUJBQWlCO0lBQ2pCQyxrQkFBa0I7QUFDdEIsRUFBRTtBQUNLLE1BQU1DLG9CQUFvQjtJQUM3Qk4sU0FBUyxDQUFDO0lBQ1ZPLFNBQVM7QUFDYixFQUFFO0FBQ0ssTUFBTUMsZUFBZTtJQUN4QlIsU0FBUyxDQUFDO0lBQ1ZTLFVBQVU7QUFDZCxFQUFFO0FBQ0ssTUFBTUMsa0JBQWtCO0lBQzNCVixTQUFTLENBQUM7SUFDVlcsY0FBYztJQUNkQyxPQUFPO0FBQ1gsRUFBRTtBQUNLLE1BQU1DLGdCQUFnQjtJQUN6QkMsTUFBTTtJQUNOQyxZQUFZO0lBQ1pDLFVBQVU7QUFDZCxFQUFFO0FBQ0ssTUFBTUMsY0FBYztJQUN2QkMsUUFBUTtJQUNSQyxNQUFNO0FBQ1YsRUFBRSxDQUNGLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2NhbGN1bGFkb3JhLXJvaS8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC1wbmcvbGliLWVzbS9pbnRlcm5hbFR5cGVzLmpzPzcwZjQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IENvbG9yVHlwZSA9IHtcbiAgICBVTktOT1dOOiAtMSxcbiAgICBHUkVZU0NBTEU6IDAsXG4gICAgVFJVRUNPTE9VUjogMixcbiAgICBJTkRFWEVEX0NPTE9VUjogMyxcbiAgICBHUkVZU0NBTEVfQUxQSEE6IDQsXG4gICAgVFJVRUNPTE9VUl9BTFBIQTogNixcbn07XG5leHBvcnQgY29uc3QgQ29tcHJlc3Npb25NZXRob2QgPSB7XG4gICAgVU5LTk9XTjogLTEsXG4gICAgREVGTEFURTogMCxcbn07XG5leHBvcnQgY29uc3QgRmlsdGVyTWV0aG9kID0ge1xuICAgIFVOS05PV046IC0xLFxuICAgIEFEQVBUSVZFOiAwLFxufTtcbmV4cG9ydCBjb25zdCBJbnRlcmxhY2VNZXRob2QgPSB7XG4gICAgVU5LTk9XTjogLTEsXG4gICAgTk9fSU5URVJMQUNFOiAwLFxuICAgIEFEQU03OiAxLFxufTtcbmV4cG9ydCBjb25zdCBEaXNwb3NlT3BUeXBlID0ge1xuICAgIE5PTkU6IDAsXG4gICAgQkFDS0dST1VORDogMSxcbiAgICBQUkVWSU9VUzogMixcbn07XG5leHBvcnQgY29uc3QgQmxlbmRPcFR5cGUgPSB7XG4gICAgU09VUkNFOiAwLFxuICAgIE9WRVI6IDEsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJuYWxUeXBlcy5qcy5tYXAiXSwibmFtZXMiOlsiQ29sb3JUeXBlIiwiVU5LTk9XTiIsIkdSRVlTQ0FMRSIsIlRSVUVDT0xPVVIiLCJJTkRFWEVEX0NPTE9VUiIsIkdSRVlTQ0FMRV9BTFBIQSIsIlRSVUVDT0xPVVJfQUxQSEEiLCJDb21wcmVzc2lvbk1ldGhvZCIsIkRFRkxBVEUiLCJGaWx0ZXJNZXRob2QiLCJBREFQVElWRSIsIkludGVybGFjZU1ldGhvZCIsIk5PX0lOVEVSTEFDRSIsIkFEQU03IiwiRGlzcG9zZU9wVHlwZSIsIk5PTkUiLCJCQUNLR1JPVU5EIiwiUFJFVklPVVMiLCJCbGVuZE9wVHlwZSIsIlNPVVJDRSIsIk9WRVIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../node_modules/fast-png/lib-esm/internalTypes.js\n");

/***/ }),

/***/ "(ssr)/../../../../node_modules/fast-png/lib-esm/types.js":
/*!**********************************************************!*\
  !*** ../../../../node_modules/fast-png/lib-esm/types.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResolutionUnitSpecifier: () => (/* binding */ ResolutionUnitSpecifier)\n/* harmony export */ });\nvar ResolutionUnitSpecifier;\n(function(ResolutionUnitSpecifier) {\n    /**\n     * Unit is unknown\n     */ ResolutionUnitSpecifier[ResolutionUnitSpecifier[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    /**\n     * Unit is the metre\n     */ ResolutionUnitSpecifier[ResolutionUnitSpecifier[\"METRE\"] = 1] = \"METRE\";\n})(ResolutionUnitSpecifier || (ResolutionUnitSpecifier = {})); //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLElBQUlBLHdCQUF3QjtBQUNsQyxVQUFVQSx1QkFBdUI7SUFDOUI7O0tBRUMsR0FDREEsdUJBQXVCLENBQUNBLHVCQUF1QixDQUFDLFVBQVUsR0FBRyxFQUFFLEdBQUc7SUFDbEU7O0tBRUMsR0FDREEsdUJBQXVCLENBQUNBLHVCQUF1QixDQUFDLFFBQVEsR0FBRyxFQUFFLEdBQUc7QUFDcEUsR0FBR0EsMkJBQTRCQSxDQUFBQSwwQkFBMEIsQ0FBQyxLQUMxRCxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWxjdWxhZG9yYS1yb2kvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vdHlwZXMuanM/NmYxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIFJlc29sdXRpb25Vbml0U3BlY2lmaWVyO1xuKGZ1bmN0aW9uIChSZXNvbHV0aW9uVW5pdFNwZWNpZmllcikge1xuICAgIC8qKlxuICAgICAqIFVuaXQgaXMgdW5rbm93blxuICAgICAqL1xuICAgIFJlc29sdXRpb25Vbml0U3BlY2lmaWVyW1Jlc29sdXRpb25Vbml0U3BlY2lmaWVyW1wiVU5LTk9XTlwiXSA9IDBdID0gXCJVTktOT1dOXCI7XG4gICAgLyoqXG4gICAgICogVW5pdCBpcyB0aGUgbWV0cmVcbiAgICAgKi9cbiAgICBSZXNvbHV0aW9uVW5pdFNwZWNpZmllcltSZXNvbHV0aW9uVW5pdFNwZWNpZmllcltcIk1FVFJFXCJdID0gMV0gPSBcIk1FVFJFXCI7XG59KShSZXNvbHV0aW9uVW5pdFNwZWNpZmllciB8fCAoUmVzb2x1dGlvblVuaXRTcGVjaWZpZXIgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbIlJlc29sdXRpb25Vbml0U3BlY2lmaWVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../node_modules/fast-png/lib-esm/types.js\n");

/***/ })

};
;